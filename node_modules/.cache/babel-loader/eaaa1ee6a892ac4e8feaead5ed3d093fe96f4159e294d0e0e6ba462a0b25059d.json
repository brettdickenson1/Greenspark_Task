{"ast":null,"code":"import { createAsyncThunk, createSlice } from \"@reduxjs/toolkit\";\nimport axios from \"axios\";\nconst initialState = {\n  widgetData: [],\n  boxColors: [{\n    colorID: 1,\n    color: \"#2E3A8C\"\n  }, {\n    colorID: 2,\n    color: \"#3B755F\"\n  }, {\n    colorID: 3,\n    color: \"#F2EBDB\"\n  }, {\n    colorID: 4,\n    color: \"white\"\n  }, {\n    colorID: 5,\n    color: \"black\"\n  }]\n};\nexport const fetchWidgetData = createAsyncThunk(\"widgetData/fetch\", async () => {\n  try {\n    const url = \"https://api.mocki.io/v2/016d11e8/product-widgets\";\n    const response = await axios.get(url);\n    return response.data;\n  } catch (err) {\n    console.log(err);\n    return [];\n  }\n});\nexport const WidgetSlice = createSlice({\n  name: \"widget\",\n  initialState,\n  reducers: {\n    updateWidget: (state, action) => {\n      const index = action.payload.id;\n      return {\n        ...state,\n        boxColors: state.boxColors.map(colors => colors.colorID === colors.id ? {\n          ...colors,\n          setFocus: true\n        } : {\n          ...colors,\n          setFocus: false\n        }),\n        widgetData: state.widgetData.map((content, i) => index === content.id ? {\n          ...content,\n          selectedColor: action.payload.selectedColor\n          // setFocus: true,\n        } : index !== content.id ? {\n          ...content,\n          active: false,\n          linked: false\n          // setFocus: false,\n        } : content)\n      };\n    },\n    updateWidgetColor: state => {\n      return {\n        ...state,\n        boxColors: state.boxColors,\n        widgetData: state.widgetData.map((content, i) => content.selectedColor === \"green\" ? {\n          ...content,\n          selectedColor: \"#2E3A8C\",\n          active: false,\n          linked: true\n        } : content.selectedColor === \"black\" ? {\n          ...content,\n          selectedColor: \"#3B755F\",\n          active: false,\n          linked: true\n        } : content.selectedColor === \"blue\" ? {\n          ...content,\n          selectedColor: \"#F2EBDB\",\n          active: false,\n          linked: true,\n          amount: 100\n        } : content)\n      };\n    },\n    activateLinked: (state, action) => {\n      return {\n        ...state,\n        widgetData: state.widgetData.map((content, i) => action.payload.id === content.id ? {\n          ...content,\n          linked: !content.linked\n        } : action.payload.id !== content.id ? {\n          ...content,\n          linked: false,\n          active: false\n        } : content)\n      };\n    },\n    activateBadge: (state, action) => {\n      return {\n        ...state,\n        widgetData: state.widgetData.map((content, i) => action.payload.id === content.id ? {\n          ...content,\n          active: !content.active\n        } : action.payload.id !== content.id ? {\n          ...content,\n          active: false,\n          linked: false\n        } : content)\n      };\n    }\n  },\n  extraReducers: builder => {\n    builder.addCase(fetchWidgetData.fulfilled, (state, action) => {\n      state.widgetData = action.payload;\n    });\n  }\n});\nexport default WidgetSlice.reducer;\nexport const {\n  updateWidget,\n  activateBadge,\n  activateLinked,\n  updateWidgetColor\n} = WidgetSlice.actions;","map":{"version":3,"names":["createAsyncThunk","createSlice","axios","initialState","widgetData","boxColors","colorID","color","fetchWidgetData","url","response","get","data","err","console","log","WidgetSlice","name","reducers","updateWidget","state","action","index","payload","id","map","colors","setFocus","content","i","selectedColor","active","linked","updateWidgetColor","amount","activateLinked","activateBadge","extraReducers","builder","addCase","fulfilled","reducer","actions"],"sources":["/Users/brettdickenson1/Desktop/WORK/TypeScript/greenspark-tech-task/src/store/features/widgetSlice.ts"],"sourcesContent":["import { createAsyncThunk, createSlice, PayloadAction } from \"@reduxjs/toolkit\";\nimport { WidgetData, WidgetState } from \"../../types/globalTypes\";\nimport axios from \"axios\";\n\nconst initialState: WidgetState = {\n  widgetData: [],\n  boxColors: [\n    {\n      colorID: 1,\n      color: \"#2E3A8C\",\n    },\n    {\n      colorID: 2,\n      color: \"#3B755F\",\n    },\n    {\n      colorID: 3,\n      color: \"#F2EBDB\",\n    },\n    {\n      colorID: 4,\n      color: \"white\",\n    },\n    {\n      colorID: 5,\n      color: \"black\",\n    },\n  ],\n};\n\nexport const fetchWidgetData = createAsyncThunk(\n  \"widgetData/fetch\",\n  async () => {\n    try {\n      const url = \"https://api.mocki.io/v2/016d11e8/product-widgets\";\n      const response = await axios.get(url);\n      return response.data;\n    } catch (err) {\n      console.log(err);\n      return [];\n    }\n  }\n);\n\nexport const WidgetSlice = createSlice({\n  name: \"widget\",\n  initialState,\n  reducers: {\n    updateWidget: (\n      state,\n      action: PayloadAction<{\n        id: number;\n        selectedColor: string;\n        colorID: number;\n      }>\n    ) => {\n      const index = action.payload.id;\n      return {\n        ...state,\n        boxColors: state.boxColors.map((colors) =>\n          colors.colorID === colors.id\n            ? {\n                ...colors,\n                setFocus: true,\n              }\n            : {\n                ...colors,\n                setFocus: false,\n              }\n        ),\n        widgetData: state.widgetData.map((content, i) =>\n          index === content.id\n            ? {\n                ...content,\n                selectedColor: action.payload.selectedColor,\n                // setFocus: true,\n              }\n            : index !== content.id\n            ? {\n                ...content,\n                active: false,\n                linked: false,\n                // setFocus: false,\n              }\n            : content\n        ),\n      };\n    },\n    updateWidgetColor: (state) => {\n      return {\n        ...state,\n        boxColors: state.boxColors,\n        widgetData: state.widgetData.map((content, i) =>\n          content.selectedColor === \"green\"\n            ? {\n                ...content,\n                selectedColor: \"#2E3A8C\",\n                active: false,\n                linked: true,\n              }\n            : content.selectedColor === \"black\"\n            ? {\n                ...content,\n                selectedColor: \"#3B755F\",\n                active: false,\n                linked: true,\n              }\n            : content.selectedColor === \"blue\"\n            ? {\n                ...content,\n                selectedColor: \"#F2EBDB\",\n                active: false,\n                linked: true,\n                amount: 100,\n              }\n            : content\n        ),\n      };\n    },\n    activateLinked: (state, action: PayloadAction<{ id: number }>) => {\n      return {\n        ...state,\n        widgetData: state.widgetData.map((content, i) =>\n          action.payload.id === content.id\n            ? { ...content, linked: !content.linked }\n            : action.payload.id !== content.id\n            ? { ...content, linked: false, active: false }\n            : content\n        ),\n      };\n    },\n    activateBadge: (state, action: PayloadAction<{ id: number }>) => {\n      return {\n        ...state,\n        widgetData: state.widgetData.map((content, i) =>\n          action.payload.id === content.id\n            ? { ...content, active: !content.active }\n            : action.payload.id !== content.id\n            ? { ...content, active: false, linked: false }\n            : content\n        ),\n      };\n    },\n  },\n  extraReducers: (builder) => {\n    builder.addCase(\n      fetchWidgetData.fulfilled,\n      (state, action: PayloadAction<WidgetData[]>) => {\n        state.widgetData = action.payload;\n      }\n    );\n  },\n});\n\nexport default WidgetSlice.reducer;\nexport const {\n  updateWidget,\n  activateBadge,\n  activateLinked,\n  updateWidgetColor,\n} = WidgetSlice.actions;\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}