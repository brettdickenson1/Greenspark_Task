{"ast":null,"code":"import { createAsyncThunk, createSlice } from \"@reduxjs/toolkit\";\nconst initialState = {\n  persons: []\n};\nexport const fetchPerson = createAsyncThunk(\"person/fetch\", async thunkAPI => {\n  const response = await fetch(\"https://api.mocki.io/v2/016d11e8/product-widgets\", {\n    method: \"GET\"\n  });\n  const data = response.json();\n  return data;\n});\nexport const PersonSlice = createSlice({\n  name: \"person\",\n  initialState,\n  reducers: {\n    updateWidget: (state, action) => {\n      // const index = action.payload.id;\n      const index = state.persons.findIndex(i => i.id === action.payload.id);\n      // index === content.id;\n      return {\n        ...state,\n        persons: state.persons.map((content, i) => index === content.id ? {\n          ...content,\n          selectedColor: action.payload.selectedColor\n        } : content)\n      };\n    },\n    activateBadge: (state, action) => {\n      const index = state.persons.findIndex(i => i.id === action.payload.id);\n      return {\n        ...state,\n        persons: state.persons.map((content, i) => index === content.id ? {\n          ...content,\n          active: action.payload.active\n        } : content)\n      };\n    }\n  },\n  extraReducers: builder => {\n    builder.addCase(fetchPerson.fulfilled, (state, action) => {\n      state.persons = action.payload;\n    });\n    // builder.addCase(savePerson.fulfilled, (state, action) => {\n    //   state.persons.push(action.payload);\n    // });\n  }\n});\n\nexport default PersonSlice.reducer;\nexport const {\n  updateWidget,\n  activateBadge\n} = PersonSlice.actions;","map":{"version":3,"names":["createAsyncThunk","createSlice","initialState","persons","fetchPerson","thunkAPI","response","fetch","method","data","json","PersonSlice","name","reducers","updateWidget","state","action","index","findIndex","i","id","payload","map","content","selectedColor","activateBadge","active","extraReducers","builder","addCase","fulfilled","reducer","actions"],"sources":["/Users/brettdickenson1/Desktop/WORK/TypeScript/redux-ts/src/store/features/personSlice.ts"],"sourcesContent":["import { createAsyncThunk, createSlice, PayloadAction } from \"@reduxjs/toolkit\";\n\nexport interface Person {\n  id: number;\n  action: string;\n  active: boolean;\n  amount: number;\n  linked: boolean;\n  selectedColor: string;\n  type: string;\n}\n\ninterface PersonState {\n  persons: Person[];\n}\n\nconst initialState: PersonState = {\n  persons: [],\n};\n\nexport const fetchPerson = createAsyncThunk(\n  \"person/fetch\",\n  async (thunkAPI) => {\n    const response = await fetch(\n      \"https://api.mocki.io/v2/016d11e8/product-widgets\",\n      {\n        method: \"GET\",\n      }\n    );\n    const data = response.json();\n    return data;\n  }\n);\n\nexport const PersonSlice = createSlice({\n  name: \"person\",\n  initialState,\n  reducers: {\n    updateWidget: (\n      state,\n      action: PayloadAction<{ id: number; selectedColor: string }>\n    ) => {\n      // const index = action.payload.id;\n      const index = state.persons.findIndex((i) => i.id === action.payload.id);\n      // index === content.id;\n      return {\n        ...state,\n        persons: state.persons.map((content, i) =>\n          index === content.id\n            ? { ...content, selectedColor: action.payload.selectedColor }\n            : content\n        ),\n      };\n    },\n\n    activateBadge: (\n      state,\n      action: PayloadAction<{ id: number; active: boolean }>\n    ) => {\n      const index = state.persons.findIndex((i) => i.id === action.payload.id);\n      return {\n        ...state,\n        persons: state.persons.map((content, i) =>\n          index === content.id\n            ? { ...content, active: action.payload.active }\n            : content\n        ),\n      };\n    },\n  },\n  extraReducers: (builder) => {\n    builder.addCase(\n      fetchPerson.fulfilled,\n      (state, action: PayloadAction<Person[]>) => {\n        state.persons = action.payload;\n      }\n    );\n    // builder.addCase(savePerson.fulfilled, (state, action) => {\n    //   state.persons.push(action.payload);\n    // });\n  },\n});\n\nexport default PersonSlice.reducer;\nexport const { updateWidget, activateBadge } = PersonSlice.actions;\n"],"mappings":"AAAA,SAASA,gBAAgB,EAAEC,WAAW,QAAuB,kBAAkB;AAgB/E,MAAMC,YAAyB,GAAG;EAChCC,OAAO,EAAE;AACX,CAAC;AAED,OAAO,MAAMC,WAAW,GAAGJ,gBAAgB,CACzC,cAAc,EACd,MAAOK,QAAQ,IAAK;EAClB,MAAMC,QAAQ,GAAG,MAAMC,KAAK,CAC1B,kDAAkD,EAClD;IACEC,MAAM,EAAE;EACV,CACF,CAAC;EACD,MAAMC,IAAI,GAAGH,QAAQ,CAACI,IAAI,CAAC,CAAC;EAC5B,OAAOD,IAAI;AACb,CACF,CAAC;AAED,OAAO,MAAME,WAAW,GAAGV,WAAW,CAAC;EACrCW,IAAI,EAAE,QAAQ;EACdV,YAAY;EACZW,QAAQ,EAAE;IACRC,YAAY,EAAEA,CACZC,KAAK,EACLC,MAA4D,KACzD;MACH;MACA,MAAMC,KAAK,GAAGF,KAAK,CAACZ,OAAO,CAACe,SAAS,CAAEC,CAAC,IAAKA,CAAC,CAACC,EAAE,KAAKJ,MAAM,CAACK,OAAO,CAACD,EAAE,CAAC;MACxE;MACA,OAAO;QACL,GAAGL,KAAK;QACRZ,OAAO,EAAEY,KAAK,CAACZ,OAAO,CAACmB,GAAG,CAAC,CAACC,OAAO,EAAEJ,CAAC,KACpCF,KAAK,KAAKM,OAAO,CAACH,EAAE,GAChB;UAAE,GAAGG,OAAO;UAAEC,aAAa,EAAER,MAAM,CAACK,OAAO,CAACG;QAAc,CAAC,GAC3DD,OACN;MACF,CAAC;IACH,CAAC;IAEDE,aAAa,EAAEA,CACbV,KAAK,EACLC,MAAsD,KACnD;MACH,MAAMC,KAAK,GAAGF,KAAK,CAACZ,OAAO,CAACe,SAAS,CAAEC,CAAC,IAAKA,CAAC,CAACC,EAAE,KAAKJ,MAAM,CAACK,OAAO,CAACD,EAAE,CAAC;MACxE,OAAO;QACL,GAAGL,KAAK;QACRZ,OAAO,EAAEY,KAAK,CAACZ,OAAO,CAACmB,GAAG,CAAC,CAACC,OAAO,EAAEJ,CAAC,KACpCF,KAAK,KAAKM,OAAO,CAACH,EAAE,GAChB;UAAE,GAAGG,OAAO;UAAEG,MAAM,EAAEV,MAAM,CAACK,OAAO,CAACK;QAAO,CAAC,GAC7CH,OACN;MACF,CAAC;IACH;EACF,CAAC;EACDI,aAAa,EAAGC,OAAO,IAAK;IAC1BA,OAAO,CAACC,OAAO,CACbzB,WAAW,CAAC0B,SAAS,EACrB,CAACf,KAAK,EAAEC,MAA+B,KAAK;MAC1CD,KAAK,CAACZ,OAAO,GAAGa,MAAM,CAACK,OAAO;IAChC,CACF,CAAC;IACD;IACA;IACA;EACF;AACF,CAAC,CAAC;;AAEF,eAAeV,WAAW,CAACoB,OAAO;AAClC,OAAO,MAAM;EAAEjB,YAAY;EAAEW;AAAc,CAAC,GAAGd,WAAW,CAACqB,OAAO"},"metadata":{},"sourceType":"module","externalDependencies":[]}