{"ast":null,"code":"var _ClickExample$paramet, _ClickExample$paramet2, _ClickExample$paramet3, _FireEventExample$par, _FireEventExample$par2, _FireEventExample$par3;\n// import type { Meta, StoryObj } from \"@storybook/react\";\n// import { within, userEvent } from \"@storybook/testing-library\";\n// import WidgetInput from \"../components/UI/WidgetInput/WidgetInput\";\n\n// const meta = {\n//   title: \"WidgetInput\",\n//   component: WidgetInput,\n//   tags: [\"autodocs\"],\n//   argTypes: {\n//     handleClick: { action: \"onClick\" },\n//   },\n// } as Meta<typeof WidgetInput>;\n\n// export default meta;\n\n// export const LinkedInputOnClick: StoryObj<typeof WidgetInput> = (args: any) => {\n//   return <WidgetInput {...args} />;\n// };\n\n// LinkedInputOnClick.args = {\n//   toggleStyles: false,\n//   checkedState: false,\n//   widgetData: {\n//     id: 1,\n//     type: \"plastic bottles\",\n//     amount: 100,\n//     active: false,\n//     linked: false,\n//     selectedColor: \"#2E3A8C\",\n//   },\n//   //   updateInput: () => {\n//   //     console.log(\"btn click\");\n//   //   },\n// };\n\n// import type { Meta, StoryObj } from \"@storybook/react\";\n// import React from \"react\";\n// import WidgetInput from \"../components/UI/WidgetInput/WidgetInput\";\n// import { InputProps } from \"../types/globalTypes\";\n// import { Button, Props } from \"../components/UI/Button\";\n\n// const meta: Meta = {\n//   title: \"Button\",\n//   component: Button,\n// };\n\n// export default meta;\n\n// const Template: StoryObj = (args: Props) => <Button {...args} />;\n\n// export const Default = Template.bind({});\n\n// export const Default = () => <Button variant=\"primary\">Click me</Button>;\n\n// MyComponent.stories.ts|tsx\n\n// Replace your-framework with the name of your framework\n\nimport { fireEvent, userEvent, within } from \"@storybook/testing-library\";\nimport { Button } from \"../components/UI/Button\";\nconst meta = {\n  component: Button\n};\nexport default meta;\n/* See https://storybook.js.org/docs/react/writing-stories/play-function#working-with-the-canvas\n * to learn more about using the canvasElement to query the DOM\n */\nexport const ClickExample = {\n  play: async ({\n    canvasElement\n  }) => {\n    const canvas = within(canvasElement);\n\n    // See https://storybook.js.org/docs/react/essentials/actions#automatically-matching-args to learn how to setup logging in the Actions panel\n    await userEvent.click(canvas.getByRole(\"button\"));\n  }\n};\nexport const FireEventExample = {\n  play: async ({\n    canvasElement\n  }) => {\n    const canvas = within(canvasElement);\n\n    // See https://storybook.js.org/docs/react/essentials/actions#automatically-matching-args to learn how to setup logging in the Actions panel\n    await fireEvent.click(canvas.getByTestId(\"data-testid\"));\n  }\n};\nClickExample.parameters = {\n  ...ClickExample.parameters,\n  docs: {\n    ...((_ClickExample$paramet = ClickExample.parameters) === null || _ClickExample$paramet === void 0 ? void 0 : _ClickExample$paramet.docs),\n    source: {\n      originalSource: \"{\\n  play: async ({\\n    canvasElement\\n  }) => {\\n    const canvas = within(canvasElement);\\n\\n    // See https://storybook.js.org/docs/react/essentials/actions#automatically-matching-args to learn how to setup logging in the Actions panel\\n    await userEvent.click(canvas.getByRole(\\\"button\\\"));\\n  }\\n}\",\n      ...((_ClickExample$paramet2 = ClickExample.parameters) === null || _ClickExample$paramet2 === void 0 ? void 0 : (_ClickExample$paramet3 = _ClickExample$paramet2.docs) === null || _ClickExample$paramet3 === void 0 ? void 0 : _ClickExample$paramet3.source)\n    }\n  }\n};\nFireEventExample.parameters = {\n  ...FireEventExample.parameters,\n  docs: {\n    ...((_FireEventExample$par = FireEventExample.parameters) === null || _FireEventExample$par === void 0 ? void 0 : _FireEventExample$par.docs),\n    source: {\n      originalSource: \"{\\n  play: async ({\\n    canvasElement\\n  }) => {\\n    const canvas = within(canvasElement);\\n\\n    // See https://storybook.js.org/docs/react/essentials/actions#automatically-matching-args to learn how to setup logging in the Actions panel\\n    await fireEvent.click(canvas.getByTestId(\\\"data-testid\\\"));\\n  }\\n}\",\n      ...((_FireEventExample$par2 = FireEventExample.parameters) === null || _FireEventExample$par2 === void 0 ? void 0 : (_FireEventExample$par3 = _FireEventExample$par2.docs) === null || _FireEventExample$par3 === void 0 ? void 0 : _FireEventExample$par3.source)\n    }\n  }\n};\nexport const __namedExportsOrder = [\"ClickExample\", \"FireEventExample\"];","map":{"version":3,"names":[],"sources":[],"sourcesContent":["// import type { Meta, StoryObj } from \"@storybook/react\";\n// import { within, userEvent } from \"@storybook/testing-library\";\n// import WidgetInput from \"../components/UI/WidgetInput/WidgetInput\";\n\n// const meta = {\n//   title: \"WidgetInput\",\n//   component: WidgetInput,\n//   tags: [\"autodocs\"],\n//   argTypes: {\n//     handleClick: { action: \"onClick\" },\n//   },\n// } as Meta<typeof WidgetInput>;\n\n// export default meta;\n\n// export const LinkedInputOnClick: StoryObj<typeof WidgetInput> = (args: any) => {\n//   return <WidgetInput {...args} />;\n// };\n\n// LinkedInputOnClick.args = {\n//   toggleStyles: false,\n//   checkedState: false,\n//   widgetData: {\n//     id: 1,\n//     type: \"plastic bottles\",\n//     amount: 100,\n//     active: false,\n//     linked: false,\n//     selectedColor: \"#2E3A8C\",\n//   },\n//   //   updateInput: () => {\n//   //     console.log(\"btn click\");\n//   //   },\n// };\n\n// import type { Meta, StoryObj } from \"@storybook/react\";\n// import React from \"react\";\n// import WidgetInput from \"../components/UI/WidgetInput/WidgetInput\";\n// import { InputProps } from \"../types/globalTypes\";\n// import { Button, Props } from \"../components/UI/Button\";\n\n// const meta: Meta = {\n//   title: \"Button\",\n//   component: Button,\n// };\n\n// export default meta;\n\n// const Template: StoryObj = (args: Props) => <Button {...args} />;\n\n// export const Default = Template.bind({});\n\n// export const Default = () => <Button variant=\"primary\">Click me</Button>;\n\n// MyComponent.stories.ts|tsx\n\n// Replace your-framework with the name of your framework\nimport type { Meta, StoryObj } from \"@storybook/react\";\nimport { fireEvent, userEvent, within } from \"@storybook/testing-library\";\nimport { Button } from \"../components/UI/Button\";\nconst meta: Meta<typeof Button> = {\n  component: Button\n};\nexport default meta;\ntype Story = StoryObj<typeof Button>;\n\n/* See https://storybook.js.org/docs/react/writing-stories/play-function#working-with-the-canvas\n * to learn more about using the canvasElement to query the DOM\n */\nexport const ClickExample: Story = {\n  play: async ({\n    canvasElement\n  }) => {\n    const canvas = within(canvasElement);\n\n    // See https://storybook.js.org/docs/react/essentials/actions#automatically-matching-args to learn how to setup logging in the Actions panel\n    await userEvent.click(canvas.getByRole(\"button\"));\n  }\n};\nexport const FireEventExample: Story = {\n  play: async ({\n    canvasElement\n  }) => {\n    const canvas = within(canvasElement);\n\n    // See https://storybook.js.org/docs/react/essentials/actions#automatically-matching-args to learn how to setup logging in the Actions panel\n    await fireEvent.click(canvas.getByTestId(\"data-testid\"));\n  }\n};\nClickExample.parameters = {\n  ...ClickExample.parameters,\n  docs: {\n    ...ClickExample.parameters?.docs,\n    source: {\n      originalSource: \"{\\n  play: async ({\\n    canvasElement\\n  }) => {\\n    const canvas = within(canvasElement);\\n\\n    // See https://storybook.js.org/docs/react/essentials/actions#automatically-matching-args to learn how to setup logging in the Actions panel\\n    await userEvent.click(canvas.getByRole(\\\"button\\\"));\\n  }\\n}\",\n      ...ClickExample.parameters?.docs?.source\n    }\n  }\n};\nFireEventExample.parameters = {\n  ...FireEventExample.parameters,\n  docs: {\n    ...FireEventExample.parameters?.docs,\n    source: {\n      originalSource: \"{\\n  play: async ({\\n    canvasElement\\n  }) => {\\n    const canvas = within(canvasElement);\\n\\n    // See https://storybook.js.org/docs/react/essentials/actions#automatically-matching-args to learn how to setup logging in the Actions panel\\n    await fireEvent.click(canvas.getByTestId(\\\"data-testid\\\"));\\n  }\\n}\",\n      ...FireEventExample.parameters?.docs?.source\n    }\n  }\n};"],"mappings":""},"metadata":{},"sourceType":"module","externalDependencies":[]}