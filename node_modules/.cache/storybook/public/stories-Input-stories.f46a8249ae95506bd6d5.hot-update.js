globalThis["webpackHotUpdateredux_ts"]("stories-Input-stories",{

/***/ "./src/stories/Input.stories.tsx":
/*!***************************************!*\
  !*** ./src/stories/Input.stories.tsx ***!
  \***************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

/* provided dependency */ var __react_refresh_utils__ = __webpack_require__(/*! ./node_modules/@pmmmwh/react-refresh-webpack-plugin/lib/runtime/RefreshUtils.js */ "./node_modules/@pmmmwh/react-refresh-webpack-plugin/lib/runtime/RefreshUtils.js");
/* provided dependency */ var __react_refresh_error_overlay__ = __webpack_require__(/*! ./node_modules/@pmmmwh/react-refresh-webpack-plugin/overlay/index.js */ "./node_modules/@pmmmwh/react-refresh-webpack-plugin/overlay/index.js");
__webpack_require__.$Refresh$.runtime = __webpack_require__(/*! ./node_modules/react-refresh/runtime.js */ "./node_modules/react-refresh/runtime.js");

// import type { Meta, StoryObj } from "@storybook/react";
// import { within, userEvent } from "@storybook/testing-library";
// import WidgetInput from "../components/UI/WidgetInput/WidgetInput";

// const meta = {
//   title: "WidgetInput",
//   component: WidgetInput,
//   tags: ["autodocs"],
//   argTypes: {
//     handleClick: { action: "onClick" },
//   },
// } as Meta<typeof WidgetInput>;

// export default meta;

// export const LinkedInputOnClick: StoryObj<typeof WidgetInput> = (args: any) => {
//   return <WidgetInput {...args} />;
// };

// LinkedInputOnClick.args = {
//   toggleStyles: false,
//   checkedState: false,
//   widgetData: {
//     id: 1,
//     type: "plastic bottles",
//     amount: 100,
//     active: false,
//     linked: false,
//     selectedColor: "#2E3A8C",
//   },
//   //   updateInput: () => {
//   //     console.log("btn click");
//   //   },
// };

// // import type { Meta, StoryObj } from "@storybook/react";
// // import React from "react";
// // import WidgetInput from "../components/UI/WidgetInput/WidgetInput";
// // import { InputProps } from "../types/globalTypes";
// // import { Button, Props } from "../components/UI/Button";

// // const meta: Meta = {
// //   title: "Button",
// //   component: Button,
// // };

// // export default meta;

// // const Template: StoryObj = (args: Props) => <Button {...args} />;

// // export const Default = Template.bind({});

// // export const Default = () => <Button variant="primary">Click me</Button>;

// // MyComponent.stories.ts|tsx

// import type { Meta, StoryObj } from "@storybook/react";

// import { fireEvent, userEvent, within } from "@storybook/testing-library";

// import { Button } from "../components/UI/Button";
// import WidgetInput from "../components/UI/WidgetInput/WidgetInput";

// const meta: Meta<typeof WidgetInput> = {
//   component: WidgetInput,
// };

// export default meta;
// type Story = StoryObj<typeof WidgetInput>;

// /* See https://storybook.js.org/docs/react/writing-stories/play-function#working-with-the-canvas
//  * to learn more about using the canvasElement to query the DOM
//  */
// export const ClickExample: Story = {
//   play: async ({ canvasElement }) => {
//     const canvas = within(canvasElement);

//     // See https://storybook.js.org/docs/react/essentials/actions#automatically-matching-args to learn how to setup logging in the Actions panel
//     await userEvent.click(canvas.getByRole("button"));
//   },
// };

// export const FireEventExample: Story = {
//   play: async ({ canvasElement }) => {
//     const canvas = within(canvasElement);

//     // See https://storybook.js.org/docs/react/essentials/actions#automatically-matching-args to learn how to setup logging in the Actions panel
//     await fireEvent.click(canvas.getByTestId("data-testid"));
//   },
// };

const $ReactRefreshModuleId$ = __webpack_require__.$Refresh$.moduleId;
const $ReactRefreshCurrentExports$ = __react_refresh_utils__.getModuleExports(
	$ReactRefreshModuleId$
);

function $ReactRefreshModuleRuntime$(exports) {
	if (true) {
		let errorOverlay;
		if (typeof __react_refresh_error_overlay__ !== 'undefined') {
			errorOverlay = __react_refresh_error_overlay__;
		}
		let testMode;
		if (typeof __react_refresh_test__ !== 'undefined') {
			testMode = __react_refresh_test__;
		}
		return __react_refresh_utils__.executeRuntime(
			exports,
			$ReactRefreshModuleId$,
			module.hot,
			errorOverlay,
			testMode
		);
	}
}

if (typeof Promise !== 'undefined' && $ReactRefreshCurrentExports$ instanceof Promise) {
	$ReactRefreshCurrentExports$.then($ReactRefreshModuleRuntime$);
} else {
	$ReactRefreshModuleRuntime$($ReactRefreshCurrentExports$);
}

/***/ })

});
//# sourceMappingURL=stories-Input-stories.f46a8249ae95506bd6d5.hot-update.js.map