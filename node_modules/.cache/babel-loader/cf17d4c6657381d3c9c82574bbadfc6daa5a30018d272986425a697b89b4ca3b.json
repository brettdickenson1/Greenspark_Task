{"ast":null,"code":"import { createAsyncThunk, createSlice } from \"@reduxjs/toolkit\";\nconst initialState = {\n  persons: []\n};\n\n// const initialState: PersonState = {\n//   persons: [],\n// };\n\nexport const fetchPerson = createAsyncThunk(\"person/fetch\", async thunkAPI => {\n  const response = await fetch(\"https://api.mocki.io/v2/016d11e8/product-widgets\", {\n    method: \"GET\"\n  });\n  const data = response.json();\n  console.log(response, \"RESPONSE HERE YOOO\");\n  return data;\n});\nexport const PersonSlice = createSlice({\n  name: \"person\",\n  initialState,\n  reducers: {\n    // addPerson: (state, action) => {\n    //   state.persons = action.payload;\n    // },\n\n    addPerson: (state, action) => {\n      //   state.selectedColor = action.payload;\n      const x = state.persons.map(res => res.selectedColor);\n      console.log(x, \"XXX\");\n      state.colors = action.payload;\n\n      //   const person = state.persons.find((p) => p.active === action.active);\n      //   person.active = action.active;\n    }\n  },\n\n  extraReducers: builder => {\n    builder.addCase(fetchPerson.fulfilled, (state, action) => {\n      state.persons = action.payload;\n    });\n    // builder.addCase(savePerson.fulfilled, (state, action) => {\n    //   state.persons.push(action.payload);\n    // });\n  }\n});\n\nexport default PersonSlice.reducer;\nexport const {\n  addPerson\n} = PersonSlice.actions;","map":{"version":3,"names":["createAsyncThunk","createSlice","initialState","persons","fetchPerson","thunkAPI","response","fetch","method","data","json","console","log","PersonSlice","name","reducers","addPerson","state","action","x","map","res","selectedColor","colors","payload","extraReducers","builder","addCase","fulfilled","reducer","actions"],"sources":["/Users/brettdickenson1/Desktop/WORK/TypeScript/redux-ts/src/store/features/personSlice.ts"],"sourcesContent":["import { createAsyncThunk, createSlice, PayloadAction } from \"@reduxjs/toolkit\";\n\nexport interface Person {\n  id: number;\n  action: string;\n  active: boolean;\n  amount: number;\n  linked: boolean;\n  selectedColor: string;\n  type: string;\n}\n\nexport interface Colors {\n  selectedColor: string;\n}\n\ninterface PersonState {\n  persons: Person[];\n  //   colors: Colors[];\n}\n\nconst initialState: PersonState = {\n  persons: [],\n};\n\n// const initialState: PersonState = {\n//   persons: [],\n// };\n\nexport const fetchPerson = createAsyncThunk(\n  \"person/fetch\",\n  async (thunkAPI) => {\n    const response = await fetch(\n      \"https://api.mocki.io/v2/016d11e8/product-widgets\",\n      {\n        method: \"GET\",\n      }\n    );\n    const data = response.json();\n    console.log(response, \"RESPONSE HERE YOOO\");\n    return data;\n  }\n);\n\nexport const PersonSlice = createSlice({\n  name: \"person\",\n  initialState,\n  reducers: {\n    // addPerson: (state, action) => {\n    //   state.persons = action.payload;\n    // },\n\n    addPerson: (state, action: PayloadAction<any>) => {\n      //   state.selectedColor = action.payload;\n      const x = state.persons.map((res) => res.selectedColor);\n      console.log(x, \"XXX\");\n\n      state.colors = action.payload;\n\n      //   const person = state.persons.find((p) => p.active === action.active);\n      //   person.active = action.active;\n    },\n  },\n  extraReducers: (builder) => {\n    builder.addCase(fetchPerson.fulfilled, (state, action) => {\n      state.persons = action.payload;\n    });\n    // builder.addCase(savePerson.fulfilled, (state, action) => {\n    //   state.persons.push(action.payload);\n    // });\n  },\n});\n\nexport default PersonSlice.reducer;\nexport const { addPerson } = PersonSlice.actions;\n"],"mappings":"AAAA,SAASA,gBAAgB,EAAEC,WAAW,QAAuB,kBAAkB;AAqB/E,MAAMC,YAAyB,GAAG;EAChCC,OAAO,EAAE;AACX,CAAC;;AAED;AACA;AACA;;AAEA,OAAO,MAAMC,WAAW,GAAGJ,gBAAgB,CACzC,cAAc,EACd,MAAOK,QAAQ,IAAK;EAClB,MAAMC,QAAQ,GAAG,MAAMC,KAAK,CAC1B,kDAAkD,EAClD;IACEC,MAAM,EAAE;EACV,CACF,CAAC;EACD,MAAMC,IAAI,GAAGH,QAAQ,CAACI,IAAI,CAAC,CAAC;EAC5BC,OAAO,CAACC,GAAG,CAACN,QAAQ,EAAE,oBAAoB,CAAC;EAC3C,OAAOG,IAAI;AACb,CACF,CAAC;AAED,OAAO,MAAMI,WAAW,GAAGZ,WAAW,CAAC;EACrCa,IAAI,EAAE,QAAQ;EACdZ,YAAY;EACZa,QAAQ,EAAE;IACR;IACA;IACA;;IAEAC,SAAS,EAAEA,CAACC,KAAK,EAAEC,MAA0B,KAAK;MAChD;MACA,MAAMC,CAAC,GAAGF,KAAK,CAACd,OAAO,CAACiB,GAAG,CAAEC,GAAG,IAAKA,GAAG,CAACC,aAAa,CAAC;MACvDX,OAAO,CAACC,GAAG,CAACO,CAAC,EAAE,KAAK,CAAC;MAErBF,KAAK,CAACM,MAAM,GAAGL,MAAM,CAACM,OAAO;;MAE7B;MACA;IACF;EACF,CAAC;;EACDC,aAAa,EAAGC,OAAO,IAAK;IAC1BA,OAAO,CAACC,OAAO,CAACvB,WAAW,CAACwB,SAAS,EAAE,CAACX,KAAK,EAAEC,MAAM,KAAK;MACxDD,KAAK,CAACd,OAAO,GAAGe,MAAM,CAACM,OAAO;IAChC,CAAC,CAAC;IACF;IACA;IACA;EACF;AACF,CAAC,CAAC;;AAEF,eAAeX,WAAW,CAACgB,OAAO;AAClC,OAAO,MAAM;EAAEb;AAAU,CAAC,GAAGH,WAAW,CAACiB,OAAO"},"metadata":{},"sourceType":"module","externalDependencies":[]}