{"ast":null,"code":"var _jsxFileName = \"/Users/brettdickenson1/Desktop/WORK/TypeScript/greenspark-tech-task/src/components/WidgetBoxes/WidgetBoxes.tsx\",\n  _s = $RefreshSig$();\nimport React, { useEffect } from \"react\";\nimport \"./WidgetBoxes.scss\";\nimport { useAppDispatch, useAppSelector } from \"../../store/store\";\nimport { updateWidget, fetchWidgetData, activateBadge, activateLinked, updateWidgetColor } from \"../../store/features/widgetSlice\";\nimport greenSparkLogo from \"../../assets/images/greenspark-logo.svg\";\nimport greenSparkLogoGreen from \"../../assets/images/greenspark-logo-green.svg\";\nimport greenSparkLogoBlack from \"../../assets/images/greenspark-logo-black.svg\";\nimport toolTipImg from \"../../assets/images/Tooltip.svg\";\nimport WidgetBtn from \"../UI/WidgetBtn/WidgetBtn\";\nimport WidgetInput from \"../UI/WidgetInput/WidgetInput\";\nimport SkeletonLoad from \"../UI/SkeletonLoading/SkeletonLoad/SkeletonLoad\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst COLORS = {\n  blue: \"#2E3A8C\",\n  green: \"#3B755F\",\n  creme: \"#F2EBDB\"\n};\nconst WidgetBoxes = () => {\n  _s();\n  const dispatch = useAppDispatch();\n  const widgetData = useAppSelector(state => state.widgetData.widgetData);\n  // const boxColors = useAppSelector((state) => state.widgetData.boxColors);\n\n  const btnRef = React.useRef(null);\n  const handleClick = e => {\n    var _btnRef$current;\n    // console.log(e.currentTarget, \"TARGET HERE\");\n    // console.log(btnRef?.current?.focus());\n    btnRef === null || btnRef === void 0 ? void 0 : (_btnRef$current = btnRef.current) === null || _btnRef$current === void 0 ? void 0 : _btnRef$current.focus();\n    console.log(btnRef.current, \"btn ref\");\n\n    // console.log(btnRef.current.value)\n  };\n\n  useEffect(() => {\n    dispatch(fetchWidgetData()).unwrap().then(() => dispatch(updateWidgetColor())).catch(e => e);\n  }, []);\n  const updateColor = (index, boxColor) => {\n    // btnRef?.current?.focus();\n    dispatch(updateWidget({\n      id: index,\n      selectedColor: boxColor\n    }));\n  };\n  const updateInputLinked = index => {\n    dispatch(activateLinked({\n      id: index\n    }));\n  };\n  const updateInputBadge = index => {\n    dispatch(activateBadge({\n      id: index\n    }));\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"widgetBox\",\n    children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n      children: \"Per product widgets\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 63,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"hr\", {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 64,\n      columnNumber: 7\n    }, this), widgetData.length > 0 ? /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"innerBoxes\",\n      children: widgetData.map((widget, i) => {\n        return /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"outerBox\",\n          children: [/*#__PURE__*/_jsxDEV(\"div\", {\n            style: {\n              background: widget.selectedColor,\n              color: widget.selectedColor === COLORS.creme ? COLORS.green : widget.selectedColor === \"white\" ? \"black\" : \"white\"\n            },\n            className: \"top\",\n            children: [/*#__PURE__*/_jsxDEV(\"img\", {\n              src: widget.selectedColor === COLORS.creme ? greenSparkLogoGreen : widget.selectedColor === \"white\" ? greenSparkLogoBlack : greenSparkLogo,\n              alt: \"greensparkLogo\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 82,\n              columnNumber: 19\n            }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"widgetContainer\",\n              children: [/*#__PURE__*/_jsxDEV(\"p\", {\n                children: [\"This product \", widget.action]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 93,\n                columnNumber: 21\n              }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 94,\n                columnNumber: 21\n              }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n                className: \"widgetTitle\",\n                children: widget.type === \"carbon\" ? /*#__PURE__*/_jsxDEV(_Fragment, {\n                  children: /*#__PURE__*/_jsxDEV(\"span\", {\n                    children: [widget.amount, \"kgs of \", widget.type]\n                  }, void 0, true, {\n                    fileName: _jsxFileName,\n                    lineNumber: 98,\n                    columnNumber: 27\n                  }, this)\n                }, void 0, false) : /*#__PURE__*/_jsxDEV(_Fragment, {\n                  children: /*#__PURE__*/_jsxDEV(\"span\", {\n                    children: [widget.amount, \" \", widget.type]\n                  }, void 0, true, {\n                    fileName: _jsxFileName,\n                    lineNumber: 104,\n                    columnNumber: 27\n                  }, this)\n                }, void 0, false)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 95,\n                columnNumber: 21\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 92,\n              columnNumber: 19\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 70,\n            columnNumber: 17\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"bottom\",\n            children: [/*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"innerBottom\",\n              children: [/*#__PURE__*/_jsxDEV(\"div\", {\n                className: \"publicProfile\",\n                children: [/*#__PURE__*/_jsxDEV(\"p\", {\n                  children: \"Link to Public Profile\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 116,\n                  columnNumber: 23\n                }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n                  className: \"tooltip\",\n                  children: [/*#__PURE__*/_jsxDEV(\"img\", {\n                    src: toolTipImg,\n                    alt: \"toolTipImg\"\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 118,\n                    columnNumber: 25\n                  }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n                    className: \"tooltiptext\",\n                    children: [\"This widget links directly to your public profile so that you can easily share your impact with your customers. Turn it off here if you do not want the badge to link to it.\", /*#__PURE__*/_jsxDEV(\"a\", {\n                      \"aria-disabled\": true,\n                      href: \"https://brett-dickenson-portfolio.netlify.app/\",\n                      children: \"View Public Profile\"\n                    }, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 124,\n                      columnNumber: 27\n                    }, this)]\n                  }, void 0, true, {\n                    fileName: _jsxFileName,\n                    lineNumber: 119,\n                    columnNumber: 25\n                  }, this)]\n                }, void 0, true, {\n                  fileName: _jsxFileName,\n                  lineNumber: 117,\n                  columnNumber: 23\n                }, this)]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 115,\n                columnNumber: 21\n              }, this), /*#__PURE__*/_jsxDEV(WidgetInput, {\n                toggleStyles: false,\n                checkedState: widget.linked ? true : false,\n                updateInput: updateInputLinked,\n                widgetData: widget\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 133,\n                columnNumber: 21\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 114,\n              columnNumber: 19\n            }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"coloredBtns\",\n              children: [/*#__PURE__*/_jsxDEV(\"p\", {\n                children: \"Badge color\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 141,\n                columnNumber: 21\n              }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n                className: \"colorBox\",\n                children: [/*#__PURE__*/_jsxDEV(WidgetBtn, {\n                  updateColor: updateColor,\n                  widgetData: widget,\n                  boxColor: COLORS.blue\n                  // btnRef={btnRef}\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 157,\n                  columnNumber: 23\n                }, this), /*#__PURE__*/_jsxDEV(WidgetBtn, {\n                  updateColor: updateColor,\n                  widgetData: widget,\n                  boxColor: COLORS.green\n                  // btnRef={btnRef}\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 163,\n                  columnNumber: 23\n                }, this), /*#__PURE__*/_jsxDEV(WidgetBtn, {\n                  updateColor: updateColor,\n                  widgetData: widget,\n                  boxColor: COLORS.creme\n                  // btnRef={btnRef}\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 169,\n                  columnNumber: 23\n                }, this), /*#__PURE__*/_jsxDEV(WidgetBtn, {\n                  updateColor: updateColor,\n                  widgetData: widget,\n                  boxColor: \"white\"\n                  // btnRef={btnRef}\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 175,\n                  columnNumber: 23\n                }, this), /*#__PURE__*/_jsxDEV(WidgetBtn, {\n                  updateColor: updateColor,\n                  widgetData: widget,\n                  boxColor: \"black\"\n                  // btnRef={btnRef}\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 181,\n                  columnNumber: 23\n                }, this)]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 142,\n                columnNumber: 21\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 140,\n              columnNumber: 19\n            }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"activateBadge\",\n              children: [/*#__PURE__*/_jsxDEV(\"button\", {\n                style: {\n                  background: \"blue\",\n                  height: 20,\n                  width: 20\n                },\n                id: \"button1\",\n                onClick: handleClick\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 190,\n                columnNumber: 21\n              }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n                ref: btnRef,\n                id: \"button2\",\n                children: \"Button2\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 197,\n                columnNumber: 21\n              }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n                children: \"Activate badge\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 200,\n                columnNumber: 21\n              }, this), /*#__PURE__*/_jsxDEV(WidgetInput, {\n                toggleStyles: true,\n                checkedState: widget.active ? true : false,\n                updateInput: updateInputBadge,\n                widgetData: widget\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 201,\n                columnNumber: 21\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 189,\n              columnNumber: 19\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 112,\n            columnNumber: 17\n          }, this)]\n        }, i, true, {\n          fileName: _jsxFileName,\n          lineNumber: 69,\n          columnNumber: 15\n        }, this);\n      })\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 66,\n      columnNumber: 9\n    }, this) : /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"skeletonContainer\",\n      children: [1, 2, 3].map(n => /*#__PURE__*/_jsxDEV(SkeletonLoad, {}, n, false, {\n        fileName: _jsxFileName,\n        lineNumber: 216,\n        columnNumber: 13\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 214,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 62,\n    columnNumber: 5\n  }, this);\n};\n_s(WidgetBoxes, \"Wn7R0xlA98H52dUpap2kLk+6FAU=\", false, function () {\n  return [useAppDispatch, useAppSelector];\n});\n_c = WidgetBoxes;\nexport default WidgetBoxes;\nvar _c;\n$RefreshReg$(_c, \"WidgetBoxes\");","map":{"version":3,"names":["React","useEffect","useAppDispatch","useAppSelector","updateWidget","fetchWidgetData","activateBadge","activateLinked","updateWidgetColor","greenSparkLogo","greenSparkLogoGreen","greenSparkLogoBlack","toolTipImg","WidgetBtn","WidgetInput","SkeletonLoad","jsxDEV","_jsxDEV","Fragment","_Fragment","COLORS","blue","green","creme","WidgetBoxes","_s","dispatch","widgetData","state","btnRef","useRef","handleClick","e","_btnRef$current","current","focus","console","log","unwrap","then","catch","updateColor","index","boxColor","id","selectedColor","updateInputLinked","updateInputBadge","className","children","fileName","_jsxFileName","lineNumber","columnNumber","length","map","widget","i","style","background","color","src","alt","action","type","amount","href","toggleStyles","checkedState","linked","updateInput","height","width","onClick","ref","active","n","_c","$RefreshReg$"],"sources":["/Users/brettdickenson1/Desktop/WORK/TypeScript/greenspark-tech-task/src/components/WidgetBoxes/WidgetBoxes.tsx"],"sourcesContent":["import React, { useEffect, useRef, useState } from \"react\";\nimport \"./WidgetBoxes.scss\";\nimport { useAppDispatch, useAppSelector } from \"../../store/store\";\nimport {\n  updateWidget,\n  fetchWidgetData,\n  activateBadge,\n  activateLinked,\n  updateWidgetColor,\n} from \"../../store/features/widgetSlice\";\nimport greenSparkLogo from \"../../assets/images/greenspark-logo.svg\";\nimport greenSparkLogoGreen from \"../../assets/images/greenspark-logo-green.svg\";\nimport greenSparkLogoBlack from \"../../assets/images/greenspark-logo-black.svg\";\nimport toolTipImg from \"../../assets/images/Tooltip.svg\";\nimport WidgetBtn from \"../UI/WidgetBtn/WidgetBtn\";\nimport WidgetInput from \"../UI/WidgetInput/WidgetInput\";\nimport SkeletonLoad from \"../UI/SkeletonLoading/SkeletonLoad/SkeletonLoad\";\n\nconst COLORS = {\n  blue: \"#2E3A8C\",\n  green: \"#3B755F\",\n  creme: \"#F2EBDB\",\n};\n\nconst WidgetBoxes: React.FC = () => {\n  const dispatch = useAppDispatch();\n  const widgetData = useAppSelector((state) => state.widgetData.widgetData);\n  // const boxColors = useAppSelector((state) => state.widgetData.boxColors);\n\n  const btnRef = React.useRef<HTMLButtonElement>(null);\n\n  const handleClick = (e: React.MouseEvent<HTMLButtonElement>): void => {\n    // console.log(e.currentTarget, \"TARGET HERE\");\n    // console.log(btnRef?.current?.focus());\n    btnRef?.current?.focus();\n    console.log(btnRef.current, \"btn ref\");\n\n    // console.log(btnRef.current.value)\n  };\n\n  useEffect(() => {\n    dispatch(fetchWidgetData())\n      .unwrap()\n      .then(() => dispatch(updateWidgetColor()))\n      .catch((e) => e);\n  }, []);\n\n  const updateColor = (index: number, boxColor: string) => {\n    // btnRef?.current?.focus();\n    dispatch(updateWidget({ id: index, selectedColor: boxColor }));\n  };\n\n  const updateInputLinked = (index: number) => {\n    dispatch(activateLinked({ id: index }));\n  };\n\n  const updateInputBadge = (index: number) => {\n    dispatch(activateBadge({ id: index }));\n  };\n\n  return (\n    <div className=\"widgetBox\">\n      <h3>Per product widgets</h3>\n      <hr />\n      {widgetData.length > 0 ? (\n        <div className={\"innerBoxes\"}>\n          {widgetData.map((widget, i) => {\n            return (\n              <div key={i} className=\"outerBox\">\n                <div\n                  style={{\n                    background: widget.selectedColor,\n                    color:\n                      widget.selectedColor === COLORS.creme\n                        ? COLORS.green\n                        : widget.selectedColor === \"white\"\n                        ? \"black\"\n                        : \"white\",\n                  }}\n                  className=\"top\"\n                >\n                  <img\n                    src={\n                      widget.selectedColor === COLORS.creme\n                        ? greenSparkLogoGreen\n                        : widget.selectedColor === \"white\"\n                        ? greenSparkLogoBlack\n                        : greenSparkLogo\n                    }\n                    alt=\"greensparkLogo\"\n                  />\n                  <div className=\"widgetContainer\">\n                    <p>This product {widget.action}</p>\n                    <br />\n                    <div className=\"widgetTitle\">\n                      {widget.type === \"carbon\" ? (\n                        <>\n                          <span>\n                            {widget.amount}kgs of {widget.type}\n                          </span>\n                        </>\n                      ) : (\n                        <>\n                          <span>\n                            {widget.amount} {widget.type}\n                          </span>\n                        </>\n                      )}\n                    </div>\n                  </div>\n                </div>\n                <div className=\"bottom\">\n                  {/* <h1>{JSON.stringify(boxColors)}</h1> */}\n                  <div className=\"innerBottom\">\n                    <div className=\"publicProfile\">\n                      <p>Link to Public Profile</p>\n                      <div className=\"tooltip\">\n                        <img src={toolTipImg} alt=\"toolTipImg\" />\n                        <span className=\"tooltiptext\">\n                          This widget links directly to your public profile so\n                          that you can easily share your impact with your\n                          customers. Turn it off here if you do not want the\n                          badge to link to it.\n                          <a\n                            aria-disabled\n                            href=\"https://brett-dickenson-portfolio.netlify.app/\"\n                          >\n                            View Public Profile\n                          </a>\n                        </span>\n                      </div>\n                    </div>\n                    <WidgetInput\n                      toggleStyles={false}\n                      checkedState={widget.linked ? true : false}\n                      updateInput={updateInputLinked}\n                      widgetData={widget}\n                    />\n                  </div>\n                  <div className=\"coloredBtns\">\n                    <p>Badge color</p>\n                    <div className=\"colorBox\">\n                      {/* {boxColors.map((color) => {\n                        return (\n                          <>\n                            <WidgetBtn\n                              updateColor={updateColor}\n                              widgetData={widget}\n                              boxColor={color.color}\n                              boxID={color.colorID}\n                              setFocus={color.setFocus}\n                            />\n                            {/* <h1>{color.id}</h1> */}\n                      {/* </>\n                        );\n                      // })} */}\n                      <WidgetBtn\n                        updateColor={updateColor}\n                        widgetData={widget}\n                        boxColor={COLORS.blue}\n                        // btnRef={btnRef}\n                      />\n                      <WidgetBtn\n                        updateColor={updateColor}\n                        widgetData={widget}\n                        boxColor={COLORS.green}\n                        // btnRef={btnRef}\n                      />\n                      <WidgetBtn\n                        updateColor={updateColor}\n                        widgetData={widget}\n                        boxColor={COLORS.creme}\n                        // btnRef={btnRef}\n                      />\n                      <WidgetBtn\n                        updateColor={updateColor}\n                        widgetData={widget}\n                        boxColor={\"white\"}\n                        // btnRef={btnRef}\n                      />\n                      <WidgetBtn\n                        updateColor={updateColor}\n                        widgetData={widget}\n                        boxColor={\"black\"}\n                        // btnRef={btnRef}\n                      />\n                    </div>\n                  </div>\n                  <div className=\"activateBadge\">\n                    <button\n                      style={{ background: \"blue\", height: 20, width: 20 }}\n                      id=\"button1\"\n                      onClick={handleClick}\n                    >\n                      {/* Button1 */}\n                    </button>\n                    <button ref={btnRef} id=\"button2\">\n                      Button2\n                    </button>\n                    <p>Activate badge</p>\n                    <WidgetInput\n                      toggleStyles={true}\n                      checkedState={widget.active ? true : false}\n                      updateInput={updateInputBadge}\n                      widgetData={widget}\n                    />\n                  </div>\n                </div>\n              </div>\n            );\n          })}\n        </div>\n      ) : (\n        <div className=\"skeletonContainer\">\n          {[1, 2, 3].map((n) => (\n            <SkeletonLoad key={n} />\n          ))}\n        </div>\n      )}\n    </div>\n  );\n};\n\nexport default WidgetBoxes;\n"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,SAAS,QAA0B,OAAO;AAC1D,OAAO,oBAAoB;AAC3B,SAASC,cAAc,EAAEC,cAAc,QAAQ,mBAAmB;AAClE,SACEC,YAAY,EACZC,eAAe,EACfC,aAAa,EACbC,cAAc,EACdC,iBAAiB,QACZ,kCAAkC;AACzC,OAAOC,cAAc,MAAM,yCAAyC;AACpE,OAAOC,mBAAmB,MAAM,+CAA+C;AAC/E,OAAOC,mBAAmB,MAAM,+CAA+C;AAC/E,OAAOC,UAAU,MAAM,iCAAiC;AACxD,OAAOC,SAAS,MAAM,2BAA2B;AACjD,OAAOC,WAAW,MAAM,+BAA+B;AACvD,OAAOC,YAAY,MAAM,iDAAiD;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAAA,SAAAC,QAAA,IAAAC,SAAA;AAE3E,MAAMC,MAAM,GAAG;EACbC,IAAI,EAAE,SAAS;EACfC,KAAK,EAAE,SAAS;EAChBC,KAAK,EAAE;AACT,CAAC;AAED,MAAMC,WAAqB,GAAGA,CAAA,KAAM;EAAAC,EAAA;EAClC,MAAMC,QAAQ,GAAGxB,cAAc,CAAC,CAAC;EACjC,MAAMyB,UAAU,GAAGxB,cAAc,CAAEyB,KAAK,IAAKA,KAAK,CAACD,UAAU,CAACA,UAAU,CAAC;EACzE;;EAEA,MAAME,MAAM,GAAG7B,KAAK,CAAC8B,MAAM,CAAoB,IAAI,CAAC;EAEpD,MAAMC,WAAW,GAAIC,CAAsC,IAAW;IAAA,IAAAC,eAAA;IACpE;IACA;IACAJ,MAAM,aAANA,MAAM,wBAAAI,eAAA,GAANJ,MAAM,CAAEK,OAAO,cAAAD,eAAA,uBAAfA,eAAA,CAAiBE,KAAK,CAAC,CAAC;IACxBC,OAAO,CAACC,GAAG,CAACR,MAAM,CAACK,OAAO,EAAE,SAAS,CAAC;;IAEtC;EACF,CAAC;;EAEDjC,SAAS,CAAC,MAAM;IACdyB,QAAQ,CAACrB,eAAe,CAAC,CAAC,CAAC,CACxBiC,MAAM,CAAC,CAAC,CACRC,IAAI,CAAC,MAAMb,QAAQ,CAAClB,iBAAiB,CAAC,CAAC,CAAC,CAAC,CACzCgC,KAAK,CAAER,CAAC,IAAKA,CAAC,CAAC;EACpB,CAAC,EAAE,EAAE,CAAC;EAEN,MAAMS,WAAW,GAAGA,CAACC,KAAa,EAAEC,QAAgB,KAAK;IACvD;IACAjB,QAAQ,CAACtB,YAAY,CAAC;MAAEwC,EAAE,EAAEF,KAAK;MAAEG,aAAa,EAAEF;IAAS,CAAC,CAAC,CAAC;EAChE,CAAC;EAED,MAAMG,iBAAiB,GAAIJ,KAAa,IAAK;IAC3ChB,QAAQ,CAACnB,cAAc,CAAC;MAAEqC,EAAE,EAAEF;IAAM,CAAC,CAAC,CAAC;EACzC,CAAC;EAED,MAAMK,gBAAgB,GAAIL,KAAa,IAAK;IAC1ChB,QAAQ,CAACpB,aAAa,CAAC;MAAEsC,EAAE,EAAEF;IAAM,CAAC,CAAC,CAAC;EACxC,CAAC;EAED,oBACEzB,OAAA;IAAK+B,SAAS,EAAC,WAAW;IAAAC,QAAA,gBACxBhC,OAAA;MAAAgC,QAAA,EAAI;IAAmB;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAI,CAAC,eAC5BpC,OAAA;MAAAiC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAK,CAAC,EACL1B,UAAU,CAAC2B,MAAM,GAAG,CAAC,gBACpBrC,OAAA;MAAK+B,SAAS,EAAE,YAAa;MAAAC,QAAA,EAC1BtB,UAAU,CAAC4B,GAAG,CAAC,CAACC,MAAM,EAAEC,CAAC,KAAK;QAC7B,oBACExC,OAAA;UAAa+B,SAAS,EAAC,UAAU;UAAAC,QAAA,gBAC/BhC,OAAA;YACEyC,KAAK,EAAE;cACLC,UAAU,EAAEH,MAAM,CAACX,aAAa;cAChCe,KAAK,EACHJ,MAAM,CAACX,aAAa,KAAKzB,MAAM,CAACG,KAAK,GACjCH,MAAM,CAACE,KAAK,GACZkC,MAAM,CAACX,aAAa,KAAK,OAAO,GAChC,OAAO,GACP;YACR,CAAE;YACFG,SAAS,EAAC,KAAK;YAAAC,QAAA,gBAEfhC,OAAA;cACE4C,GAAG,EACDL,MAAM,CAACX,aAAa,KAAKzB,MAAM,CAACG,KAAK,GACjCb,mBAAmB,GACnB8C,MAAM,CAACX,aAAa,KAAK,OAAO,GAChClC,mBAAmB,GACnBF,cACL;cACDqD,GAAG,EAAC;YAAgB;cAAAZ,QAAA,EAAAC,YAAA;cAAAC,UAAA;cAAAC,YAAA;YAAA,OACrB,CAAC,eACFpC,OAAA;cAAK+B,SAAS,EAAC,iBAAiB;cAAAC,QAAA,gBAC9BhC,OAAA;gBAAAgC,QAAA,GAAG,eAAa,EAACO,MAAM,CAACO,MAAM;cAAA;gBAAAb,QAAA,EAAAC,YAAA;gBAAAC,UAAA;gBAAAC,YAAA;cAAA,OAAI,CAAC,eACnCpC,OAAA;gBAAAiC,QAAA,EAAAC,YAAA;gBAAAC,UAAA;gBAAAC,YAAA;cAAA,OAAK,CAAC,eACNpC,OAAA;gBAAK+B,SAAS,EAAC,aAAa;gBAAAC,QAAA,EACzBO,MAAM,CAACQ,IAAI,KAAK,QAAQ,gBACvB/C,OAAA,CAAAE,SAAA;kBAAA8B,QAAA,eACEhC,OAAA;oBAAAgC,QAAA,GACGO,MAAM,CAACS,MAAM,EAAC,SAAO,EAACT,MAAM,CAACQ,IAAI;kBAAA;oBAAAd,QAAA,EAAAC,YAAA;oBAAAC,UAAA;oBAAAC,YAAA;kBAAA,OAC9B;gBAAC,gBACP,CAAC,gBAEHpC,OAAA,CAAAE,SAAA;kBAAA8B,QAAA,eACEhC,OAAA;oBAAAgC,QAAA,GACGO,MAAM,CAACS,MAAM,EAAC,GAAC,EAACT,MAAM,CAACQ,IAAI;kBAAA;oBAAAd,QAAA,EAAAC,YAAA;oBAAAC,UAAA;oBAAAC,YAAA;kBAAA,OACxB;gBAAC,gBACP;cACH;gBAAAH,QAAA,EAAAC,YAAA;gBAAAC,UAAA;gBAAAC,YAAA;cAAA,OACE,CAAC;YAAA;cAAAH,QAAA,EAAAC,YAAA;cAAAC,UAAA;cAAAC,YAAA;YAAA,OACH,CAAC;UAAA;YAAAH,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OACH,CAAC,eACNpC,OAAA;YAAK+B,SAAS,EAAC,QAAQ;YAAAC,QAAA,gBAErBhC,OAAA;cAAK+B,SAAS,EAAC,aAAa;cAAAC,QAAA,gBAC1BhC,OAAA;gBAAK+B,SAAS,EAAC,eAAe;gBAAAC,QAAA,gBAC5BhC,OAAA;kBAAAgC,QAAA,EAAG;gBAAsB;kBAAAC,QAAA,EAAAC,YAAA;kBAAAC,UAAA;kBAAAC,YAAA;gBAAA,OAAG,CAAC,eAC7BpC,OAAA;kBAAK+B,SAAS,EAAC,SAAS;kBAAAC,QAAA,gBACtBhC,OAAA;oBAAK4C,GAAG,EAAEjD,UAAW;oBAACkD,GAAG,EAAC;kBAAY;oBAAAZ,QAAA,EAAAC,YAAA;oBAAAC,UAAA;oBAAAC,YAAA;kBAAA,OAAE,CAAC,eACzCpC,OAAA;oBAAM+B,SAAS,EAAC,aAAa;oBAAAC,QAAA,GAAC,8KAK5B,eAAAhC,OAAA;sBACE,qBAAa;sBACbiD,IAAI,EAAC,gDAAgD;sBAAAjB,QAAA,EACtD;oBAED;sBAAAC,QAAA,EAAAC,YAAA;sBAAAC,UAAA;sBAAAC,YAAA;oBAAA,OAAG,CAAC;kBAAA;oBAAAH,QAAA,EAAAC,YAAA;oBAAAC,UAAA;oBAAAC,YAAA;kBAAA,OACA,CAAC;gBAAA;kBAAAH,QAAA,EAAAC,YAAA;kBAAAC,UAAA;kBAAAC,YAAA;gBAAA,OACJ,CAAC;cAAA;gBAAAH,QAAA,EAAAC,YAAA;gBAAAC,UAAA;gBAAAC,YAAA;cAAA,OACH,CAAC,eACNpC,OAAA,CAACH,WAAW;gBACVqD,YAAY,EAAE,KAAM;gBACpBC,YAAY,EAAEZ,MAAM,CAACa,MAAM,GAAG,IAAI,GAAG,KAAM;gBAC3CC,WAAW,EAAExB,iBAAkB;gBAC/BnB,UAAU,EAAE6B;cAAO;gBAAAN,QAAA,EAAAC,YAAA;gBAAAC,UAAA;gBAAAC,YAAA;cAAA,OACpB,CAAC;YAAA;cAAAH,QAAA,EAAAC,YAAA;cAAAC,UAAA;cAAAC,YAAA;YAAA,OACC,CAAC,eACNpC,OAAA;cAAK+B,SAAS,EAAC,aAAa;cAAAC,QAAA,gBAC1BhC,OAAA;gBAAAgC,QAAA,EAAG;cAAW;gBAAAC,QAAA,EAAAC,YAAA;gBAAAC,UAAA;gBAAAC,YAAA;cAAA,OAAG,CAAC,eAClBpC,OAAA;gBAAK+B,SAAS,EAAC,UAAU;gBAAAC,QAAA,gBAevBhC,OAAA,CAACJ,SAAS;kBACR4B,WAAW,EAAEA,WAAY;kBACzBd,UAAU,EAAE6B,MAAO;kBACnBb,QAAQ,EAAEvB,MAAM,CAACC;kBACjB;gBAAA;kBAAA6B,QAAA,EAAAC,YAAA;kBAAAC,UAAA;kBAAAC,YAAA;gBAAA,OACD,CAAC,eACFpC,OAAA,CAACJ,SAAS;kBACR4B,WAAW,EAAEA,WAAY;kBACzBd,UAAU,EAAE6B,MAAO;kBACnBb,QAAQ,EAAEvB,MAAM,CAACE;kBACjB;gBAAA;kBAAA4B,QAAA,EAAAC,YAAA;kBAAAC,UAAA;kBAAAC,YAAA;gBAAA,OACD,CAAC,eACFpC,OAAA,CAACJ,SAAS;kBACR4B,WAAW,EAAEA,WAAY;kBACzBd,UAAU,EAAE6B,MAAO;kBACnBb,QAAQ,EAAEvB,MAAM,CAACG;kBACjB;gBAAA;kBAAA2B,QAAA,EAAAC,YAAA;kBAAAC,UAAA;kBAAAC,YAAA;gBAAA,OACD,CAAC,eACFpC,OAAA,CAACJ,SAAS;kBACR4B,WAAW,EAAEA,WAAY;kBACzBd,UAAU,EAAE6B,MAAO;kBACnBb,QAAQ,EAAE;kBACV;gBAAA;kBAAAO,QAAA,EAAAC,YAAA;kBAAAC,UAAA;kBAAAC,YAAA;gBAAA,OACD,CAAC,eACFpC,OAAA,CAACJ,SAAS;kBACR4B,WAAW,EAAEA,WAAY;kBACzBd,UAAU,EAAE6B,MAAO;kBACnBb,QAAQ,EAAE;kBACV;gBAAA;kBAAAO,QAAA,EAAAC,YAAA;kBAAAC,UAAA;kBAAAC,YAAA;gBAAA,OACD,CAAC;cAAA;gBAAAH,QAAA,EAAAC,YAAA;gBAAAC,UAAA;gBAAAC,YAAA;cAAA,OACC,CAAC;YAAA;cAAAH,QAAA,EAAAC,YAAA;cAAAC,UAAA;cAAAC,YAAA;YAAA,OACH,CAAC,eACNpC,OAAA;cAAK+B,SAAS,EAAC,eAAe;cAAAC,QAAA,gBAC5BhC,OAAA;gBACEyC,KAAK,EAAE;kBAAEC,UAAU,EAAE,MAAM;kBAAEY,MAAM,EAAE,EAAE;kBAAEC,KAAK,EAAE;gBAAG,CAAE;gBACrD5B,EAAE,EAAC,SAAS;gBACZ6B,OAAO,EAAE1C;cAAY;gBAAAmB,QAAA,EAAAC,YAAA;gBAAAC,UAAA;gBAAAC,YAAA;cAAA,OAGf,CAAC,eACTpC,OAAA;gBAAQyD,GAAG,EAAE7C,MAAO;gBAACe,EAAE,EAAC,SAAS;gBAAAK,QAAA,EAAC;cAElC;gBAAAC,QAAA,EAAAC,YAAA;gBAAAC,UAAA;gBAAAC,YAAA;cAAA,OAAQ,CAAC,eACTpC,OAAA;gBAAAgC,QAAA,EAAG;cAAc;gBAAAC,QAAA,EAAAC,YAAA;gBAAAC,UAAA;gBAAAC,YAAA;cAAA,OAAG,CAAC,eACrBpC,OAAA,CAACH,WAAW;gBACVqD,YAAY,EAAE,IAAK;gBACnBC,YAAY,EAAEZ,MAAM,CAACmB,MAAM,GAAG,IAAI,GAAG,KAAM;gBAC3CL,WAAW,EAAEvB,gBAAiB;gBAC9BpB,UAAU,EAAE6B;cAAO;gBAAAN,QAAA,EAAAC,YAAA;gBAAAC,UAAA;gBAAAC,YAAA;cAAA,OACpB,CAAC;YAAA;cAAAH,QAAA,EAAAC,YAAA;cAAAC,UAAA;cAAAC,YAAA;YAAA,OACC,CAAC;UAAA;YAAAH,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OACH,CAAC;QAAA,GA3IEI,CAAC;UAAAP,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OA4IN,CAAC;MAEV,CAAC;IAAC;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACC,CAAC,gBAENpC,OAAA;MAAK+B,SAAS,EAAC,mBAAmB;MAAAC,QAAA,EAC/B,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC,CAACM,GAAG,CAAEqB,CAAC,iBACf3D,OAAA,CAACF,YAAY,MAAM6D,CAAC;QAAA1B,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAG,CACxB;IAAC;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACC,CACN;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACE,CAAC;AAEV,CAAC;AAAC5B,EAAA,CArMID,WAAqB;EAAA,QACRtB,cAAc,EACZC,cAAc;AAAA;AAAA0E,EAAA,GAF7BrD,WAAqB;AAuM3B,eAAeA,WAAW;AAAC,IAAAqD,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}