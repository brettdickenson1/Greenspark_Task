{"ast":null,"code":"import { createAsyncThunk, createSlice } from \"@reduxjs/toolkit\";\n// export interface Person {\n//   id: number;\n//   action: string;\n//   active: boolean;\n//   amount: number;\n//   linked: boolean;\n//   selectedColor: string;\n//   type: string;\n// }\n\n// interface PersonState {\n//   persons: Person[];\n// }\nconst initialState = {\n  persons: []\n};\nexport const fetchPerson = createAsyncThunk(\"person/fetch\", async thunkAPI => {\n  const response = await fetch(\"https://api.mocki.io/v2/016d11e8/product-widgets\", {\n    method: \"GET\"\n  });\n  const data = response.json();\n  return data;\n});\nexport const PersonSlice = createSlice({\n  name: \"person\",\n  initialState,\n  reducers: {\n    updateWidget: (state, action) => {\n      const index = action.payload.id;\n      return {\n        ...state,\n        persons: state.persons.map((content, i) => index === content.id ? {\n          ...content,\n          selectedColor: action.payload.selectedColor\n        } : content)\n      };\n    },\n    activateLinked: (state, action) => {\n      return {\n        ...state,\n        persons: state.persons.map((content, i) => action.payload.id === content.id ? {\n          ...content,\n          linked: !content.linked\n        } : action.payload.id !== content.id ? {\n          ...content,\n          linked: false\n        } : content)\n      };\n    },\n    activateBadge: (state, action) => {\n      return {\n        ...state,\n        persons: state.persons.map((content, i) => action.payload.id === content.id ? {\n          ...content,\n          active: !content.active\n        } : action.payload.id !== content.id ? {\n          ...content,\n          active: false\n        } : content)\n      };\n    }\n  },\n  extraReducers: builder => {\n    builder.addCase(fetchPerson.fulfilled, (state, action) => {\n      state.persons = action.payload;\n    });\n    // builder.addCase(savePerson.fulfilled, (state, action) => {\n    //   state.persons.push(action.payload);\n    // });\n  }\n});\n\nexport default PersonSlice.reducer;\nexport const {\n  updateWidget,\n  activateBadge,\n  activateLinked\n} = PersonSlice.actions;","map":{"version":3,"names":["createAsyncThunk","createSlice","initialState","persons","fetchPerson","thunkAPI","response","fetch","method","data","json","PersonSlice","name","reducers","updateWidget","state","action","index","payload","id","map","content","i","selectedColor","activateLinked","linked","activateBadge","active","extraReducers","builder","addCase","fulfilled","reducer","actions"],"sources":["/Users/brettdickenson1/Desktop/WORK/TypeScript/greenspark-tech-task/src/store/features/personSlice.ts"],"sourcesContent":["import { createAsyncThunk, createSlice, PayloadAction } from \"@reduxjs/toolkit\";\nimport { Person, PersonState } from \"../../types/globalTypes\";\n\n// export interface Person {\n//   id: number;\n//   action: string;\n//   active: boolean;\n//   amount: number;\n//   linked: boolean;\n//   selectedColor: string;\n//   type: string;\n// }\n\n// interface PersonState {\n//   persons: Person[];\n// }\n\nconst initialState: PersonState = {\n  persons: [],\n};\n\nexport const fetchPerson = createAsyncThunk(\n  \"person/fetch\",\n  async (thunkAPI) => {\n    const response = await fetch(\n      \"https://api.mocki.io/v2/016d11e8/product-widgets\",\n      {\n        method: \"GET\",\n      }\n    );\n    const data = response.json();\n    return data;\n  }\n);\n\nexport const PersonSlice = createSlice({\n  name: \"person\",\n  initialState,\n  reducers: {\n    updateWidget: (\n      state,\n      action: PayloadAction<{ id: number; selectedColor: string }>\n    ) => {\n      const index = action.payload.id;\n      return {\n        ...state,\n        persons: state.persons.map((content, i) =>\n          index === content.id\n            ? { ...content, selectedColor: action.payload.selectedColor }\n            : content\n        ),\n      };\n    },\n    activateLinked: (state, action: PayloadAction<{ id: number }>) => {\n      return {\n        ...state,\n        persons: state.persons.map((content, i) =>\n          action.payload.id === content.id\n            ? { ...content, linked: !content.linked }\n            : action.payload.id !== content.id\n            ? { ...content, linked: false }\n            : content\n        ),\n      };\n    },\n    activateBadge: (state, action: PayloadAction<{ id: number }>) => {\n      return {\n        ...state,\n        persons: state.persons.map((content, i) =>\n          action.payload.id === content.id\n            ? { ...content, active: !content.active }\n            : action.payload.id !== content.id\n            ? { ...content, active: false }\n            : content\n        ),\n      };\n    },\n  },\n  extraReducers: (builder) => {\n    builder.addCase(\n      fetchPerson.fulfilled,\n      (state, action: PayloadAction<Person[]>) => {\n        state.persons = action.payload;\n      }\n    );\n    // builder.addCase(savePerson.fulfilled, (state, action) => {\n    //   state.persons.push(action.payload);\n    // });\n  },\n});\n\nexport default PersonSlice.reducer;\nexport const { updateWidget, activateBadge, activateLinked } =\n  PersonSlice.actions;\n"],"mappings":"AAAA,SAASA,gBAAgB,EAAEC,WAAW,QAAuB,kBAAkB;AAG/E;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AAEA,MAAMC,YAAyB,GAAG;EAChCC,OAAO,EAAE;AACX,CAAC;AAED,OAAO,MAAMC,WAAW,GAAGJ,gBAAgB,CACzC,cAAc,EACd,MAAOK,QAAQ,IAAK;EAClB,MAAMC,QAAQ,GAAG,MAAMC,KAAK,CAC1B,kDAAkD,EAClD;IACEC,MAAM,EAAE;EACV,CACF,CAAC;EACD,MAAMC,IAAI,GAAGH,QAAQ,CAACI,IAAI,CAAC,CAAC;EAC5B,OAAOD,IAAI;AACb,CACF,CAAC;AAED,OAAO,MAAME,WAAW,GAAGV,WAAW,CAAC;EACrCW,IAAI,EAAE,QAAQ;EACdV,YAAY;EACZW,QAAQ,EAAE;IACRC,YAAY,EAAEA,CACZC,KAAK,EACLC,MAA4D,KACzD;MACH,MAAMC,KAAK,GAAGD,MAAM,CAACE,OAAO,CAACC,EAAE;MAC/B,OAAO;QACL,GAAGJ,KAAK;QACRZ,OAAO,EAAEY,KAAK,CAACZ,OAAO,CAACiB,GAAG,CAAC,CAACC,OAAO,EAAEC,CAAC,KACpCL,KAAK,KAAKI,OAAO,CAACF,EAAE,GAChB;UAAE,GAAGE,OAAO;UAAEE,aAAa,EAAEP,MAAM,CAACE,OAAO,CAACK;QAAc,CAAC,GAC3DF,OACN;MACF,CAAC;IACH,CAAC;IACDG,cAAc,EAAEA,CAACT,KAAK,EAAEC,MAAqC,KAAK;MAChE,OAAO;QACL,GAAGD,KAAK;QACRZ,OAAO,EAAEY,KAAK,CAACZ,OAAO,CAACiB,GAAG,CAAC,CAACC,OAAO,EAAEC,CAAC,KACpCN,MAAM,CAACE,OAAO,CAACC,EAAE,KAAKE,OAAO,CAACF,EAAE,GAC5B;UAAE,GAAGE,OAAO;UAAEI,MAAM,EAAE,CAACJ,OAAO,CAACI;QAAO,CAAC,GACvCT,MAAM,CAACE,OAAO,CAACC,EAAE,KAAKE,OAAO,CAACF,EAAE,GAChC;UAAE,GAAGE,OAAO;UAAEI,MAAM,EAAE;QAAM,CAAC,GAC7BJ,OACN;MACF,CAAC;IACH,CAAC;IACDK,aAAa,EAAEA,CAACX,KAAK,EAAEC,MAAqC,KAAK;MAC/D,OAAO;QACL,GAAGD,KAAK;QACRZ,OAAO,EAAEY,KAAK,CAACZ,OAAO,CAACiB,GAAG,CAAC,CAACC,OAAO,EAAEC,CAAC,KACpCN,MAAM,CAACE,OAAO,CAACC,EAAE,KAAKE,OAAO,CAACF,EAAE,GAC5B;UAAE,GAAGE,OAAO;UAAEM,MAAM,EAAE,CAACN,OAAO,CAACM;QAAO,CAAC,GACvCX,MAAM,CAACE,OAAO,CAACC,EAAE,KAAKE,OAAO,CAACF,EAAE,GAChC;UAAE,GAAGE,OAAO;UAAEM,MAAM,EAAE;QAAM,CAAC,GAC7BN,OACN;MACF,CAAC;IACH;EACF,CAAC;EACDO,aAAa,EAAGC,OAAO,IAAK;IAC1BA,OAAO,CAACC,OAAO,CACb1B,WAAW,CAAC2B,SAAS,EACrB,CAAChB,KAAK,EAAEC,MAA+B,KAAK;MAC1CD,KAAK,CAACZ,OAAO,GAAGa,MAAM,CAACE,OAAO;IAChC,CACF,CAAC;IACD;IACA;IACA;EACF;AACF,CAAC,CAAC;;AAEF,eAAeP,WAAW,CAACqB,OAAO;AAClC,OAAO,MAAM;EAAElB,YAAY;EAAEY,aAAa;EAAEF;AAAe,CAAC,GAC1Db,WAAW,CAACsB,OAAO"},"metadata":{},"sourceType":"module","externalDependencies":[]}