"use strict";
globalThis["webpackHotUpdateredux_ts"]("stories-Input-stories",{

/***/ "./src/stories/Input.stories.tsx":
/*!***************************************!*\
  !*** ./src/stories/Input.stories.tsx ***!
  \***************************************/
/***/ ((module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   ActiveBadge: () => (/* binding */ ActiveBadge),
/* harmony export */   LinkedInput: () => (/* binding */ LinkedInput),
/* harmony export */   __namedExportsOrder: () => (/* binding */ __namedExportsOrder),
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony import */ var _components_UI_WidgetInput_WidgetInput__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../components/UI/WidgetInput/WidgetInput */ "./src/components/UI/WidgetInput/WidgetInput.tsx");
/* provided dependency */ var __react_refresh_utils__ = __webpack_require__(/*! ./node_modules/@pmmmwh/react-refresh-webpack-plugin/lib/runtime/RefreshUtils.js */ "./node_modules/@pmmmwh/react-refresh-webpack-plugin/lib/runtime/RefreshUtils.js");
/* provided dependency */ var __react_refresh_error_overlay__ = __webpack_require__(/*! ./node_modules/@pmmmwh/react-refresh-webpack-plugin/overlay/index.js */ "./node_modules/@pmmmwh/react-refresh-webpack-plugin/overlay/index.js");
__webpack_require__.$Refresh$.runtime = __webpack_require__(/*! ./node_modules/react-refresh/runtime.js */ "./node_modules/react-refresh/runtime.js");

var _LinkedInput$paramete, _LinkedInput$paramete2, _LinkedInput$paramete3, _ActiveBadge$paramete, _ActiveBadge$paramete2, _ActiveBadge$paramete3;

const meta = {
  component: _components_UI_WidgetInput_WidgetInput__WEBPACK_IMPORTED_MODULE_0__["default"],
  title: "Linked & Active Inputs"
};
/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (meta);
//ðŸ‘‡ Throws a type error it the args don't match the component props
const LinkedInput = {
  args: {}
};
const ActiveBadge = {
  args: {}
};

// export const GroupedBtns: Story = {
//   render: (args) => (
//     <div>
//       <WidgetBtn boxColor="#2E3A8C" colorID={1} />
//       <WidgetBtn boxColor="#2E3A8C" colorID={2} />
//       <WidgetBtn boxColor="#2E3A8C" colorID={3} />
//     </div>
//   ),
// };
LinkedInput.parameters = {
  ...LinkedInput.parameters,
  docs: {
    ...((_LinkedInput$paramete = LinkedInput.parameters) === null || _LinkedInput$paramete === void 0 ? void 0 : _LinkedInput$paramete.docs),
    source: {
      originalSource: "{\n  args: {}\n}",
      ...((_LinkedInput$paramete2 = LinkedInput.parameters) === null || _LinkedInput$paramete2 === void 0 ? void 0 : (_LinkedInput$paramete3 = _LinkedInput$paramete2.docs) === null || _LinkedInput$paramete3 === void 0 ? void 0 : _LinkedInput$paramete3.source)
    }
  }
};
ActiveBadge.parameters = {
  ...ActiveBadge.parameters,
  docs: {
    ...((_ActiveBadge$paramete = ActiveBadge.parameters) === null || _ActiveBadge$paramete === void 0 ? void 0 : _ActiveBadge$paramete.docs),
    source: {
      originalSource: "{\n  args: {}\n}",
      ...((_ActiveBadge$paramete2 = ActiveBadge.parameters) === null || _ActiveBadge$paramete2 === void 0 ? void 0 : (_ActiveBadge$paramete3 = _ActiveBadge$paramete2.docs) === null || _ActiveBadge$paramete3 === void 0 ? void 0 : _ActiveBadge$paramete3.source)
    }
  }
};
const __namedExportsOrder = ["LinkedInput", "ActiveBadge"];

const $ReactRefreshModuleId$ = __webpack_require__.$Refresh$.moduleId;
const $ReactRefreshCurrentExports$ = __react_refresh_utils__.getModuleExports(
	$ReactRefreshModuleId$
);

function $ReactRefreshModuleRuntime$(exports) {
	if (true) {
		let errorOverlay;
		if (typeof __react_refresh_error_overlay__ !== 'undefined') {
			errorOverlay = __react_refresh_error_overlay__;
		}
		let testMode;
		if (typeof __react_refresh_test__ !== 'undefined') {
			testMode = __react_refresh_test__;
		}
		return __react_refresh_utils__.executeRuntime(
			exports,
			$ReactRefreshModuleId$,
			module.hot,
			errorOverlay,
			testMode
		);
	}
}

if (typeof Promise !== 'undefined' && $ReactRefreshCurrentExports$ instanceof Promise) {
	$ReactRefreshCurrentExports$.then($ReactRefreshModuleRuntime$);
} else {
	$ReactRefreshModuleRuntime$($ReactRefreshCurrentExports$);
}

/***/ })

});