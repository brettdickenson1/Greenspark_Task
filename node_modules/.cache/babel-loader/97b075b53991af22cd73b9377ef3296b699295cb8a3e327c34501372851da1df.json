{"ast":null,"code":"var _jsxFileName = \"/Users/brettdickenson1/Desktop/WORK/TypeScript/greenspark-tech-task/src/components/UI/WidgetBtn/WidgetBtn.tsx\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useState } from \"react\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst WidgetBtn = ({\n  widgetData,\n  boxColor,\n  updateColor,\n  colorID\n}) => {\n  _s();\n  console.log(widgetData.boxColors, \"!!!!\");\n  const widgetBoxColors = widgetData === null || widgetData === void 0 ? void 0 : widgetData.boxColors;\n  const [boxColorID, setBoxColorID] = useState(0);\n  useEffect(() => {\n    widgetBoxColors === null || widgetBoxColors === void 0 ? void 0 : widgetBoxColors.map(res => {\n      if (res.setFocus) {\n        setBoxColorID(res.colorID);\n        console.log(res.colorID, \"COLOR ID TRUE\");\n      }\n    }, []);\n  });\n  console.log(boxColorID, \"BOX ID TRUE\");\n  const trueColor = widgetBoxColors === null || widgetBoxColors === void 0 ? void 0 : widgetBoxColors.filter(trueVal => trueVal.setFocus === true);\n\n  // console.log(trueColor);\n\n  // console.log(mapColors);\n\n  // console.log(widgetData?.boxColors?.colorID, \"dd\");\n\n  // const x = widgetData?.boxColors ? widgetData?.boxColors : null;\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: /*#__PURE__*/_jsxDEV(\"button\", {\n      style: colorID === boxColorID ? {\n        border: \"4px solid red\",\n        backgroundColor: boxColor,\n        cursor: \"pointer\"\n      } : {\n        backgroundColor: boxColor,\n        cursor: \"pointer\"\n      }\n      // style={{\n\n      //   backgroundColor: boxColor,\n      //   cursor: \"pointer\",\n      // }}\n      ,\n      onClick: () => updateColor(widgetData.id, boxColor, colorID)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 40,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 39,\n    columnNumber: 5\n  }, this);\n};\n_s(WidgetBtn, \"BP0gb8fQkAqu4CI3SsM9XrHiCdA=\");\n_c = WidgetBtn;\nexport default WidgetBtn;\nvar _c;\n$RefreshReg$(_c, \"WidgetBtn\");","map":{"version":3,"names":["React","useEffect","useState","jsxDEV","_jsxDEV","WidgetBtn","widgetData","boxColor","updateColor","colorID","_s","console","log","boxColors","widgetBoxColors","boxColorID","setBoxColorID","map","res","setFocus","trueColor","filter","trueVal","children","style","border","backgroundColor","cursor","onClick","id","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["/Users/brettdickenson1/Desktop/WORK/TypeScript/greenspark-tech-task/src/components/UI/WidgetBtn/WidgetBtn.tsx"],"sourcesContent":["import React, { useEffect, useState } from \"react\";\nimport { BtnProps } from \"../../../types/globalTypes\";\n\nconst WidgetBtn: React.FC<BtnProps> = ({\n  widgetData,\n  boxColor,\n  updateColor,\n  colorID,\n}) => {\n  console.log(widgetData.boxColors, \"!!!!\");\n  const widgetBoxColors = widgetData?.boxColors;\n\n  const [boxColorID, setBoxColorID] = useState<number>(0);\n\n  useEffect(() => {\n    widgetBoxColors?.map((res) => {\n      if (res.setFocus) {\n        setBoxColorID(res.colorID);\n        console.log(res.colorID, \"COLOR ID TRUE\");\n      }\n    }, []);\n  });\n\n  console.log(boxColorID, \"BOX ID TRUE\");\n\n  const trueColor = widgetBoxColors?.filter(\n    (trueVal) => trueVal.setFocus === true\n  );\n\n  // console.log(trueColor);\n\n  // console.log(mapColors);\n\n  // console.log(widgetData?.boxColors?.colorID, \"dd\");\n\n  // const x = widgetData?.boxColors ? widgetData?.boxColors : null;\n\n  return (\n    <div>\n      <button\n        style={\n          colorID === boxColorID\n            ? {\n                border: \"4px solid red\",\n                backgroundColor: boxColor,\n                cursor: \"pointer\",\n              }\n            : {\n                backgroundColor: boxColor,\n                cursor: \"pointer\",\n              }\n        }\n        // style={{\n\n        //   backgroundColor: boxColor,\n        //   cursor: \"pointer\",\n        // }}\n        onClick={() => updateColor(widgetData.id, boxColor, colorID)}\n      ></button>\n    </div>\n  );\n};\n\nexport default WidgetBtn;\n"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,SAAS,EAAEC,QAAQ,QAAQ,OAAO;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAGnD,MAAMC,SAA6B,GAAGA,CAAC;EACrCC,UAAU;EACVC,QAAQ;EACRC,WAAW;EACXC;AACF,CAAC,KAAK;EAAAC,EAAA;EACJC,OAAO,CAACC,GAAG,CAACN,UAAU,CAACO,SAAS,EAAE,MAAM,CAAC;EACzC,MAAMC,eAAe,GAAGR,UAAU,aAAVA,UAAU,uBAAVA,UAAU,CAAEO,SAAS;EAE7C,MAAM,CAACE,UAAU,EAAEC,aAAa,CAAC,GAAGd,QAAQ,CAAS,CAAC,CAAC;EAEvDD,SAAS,CAAC,MAAM;IACda,eAAe,aAAfA,eAAe,uBAAfA,eAAe,CAAEG,GAAG,CAAEC,GAAG,IAAK;MAC5B,IAAIA,GAAG,CAACC,QAAQ,EAAE;QAChBH,aAAa,CAACE,GAAG,CAACT,OAAO,CAAC;QAC1BE,OAAO,CAACC,GAAG,CAACM,GAAG,CAACT,OAAO,EAAE,eAAe,CAAC;MAC3C;IACF,CAAC,EAAE,EAAE,CAAC;EACR,CAAC,CAAC;EAEFE,OAAO,CAACC,GAAG,CAACG,UAAU,EAAE,aAAa,CAAC;EAEtC,MAAMK,SAAS,GAAGN,eAAe,aAAfA,eAAe,uBAAfA,eAAe,CAAEO,MAAM,CACtCC,OAAO,IAAKA,OAAO,CAACH,QAAQ,KAAK,IACpC,CAAC;;EAED;;EAEA;;EAEA;;EAEA;;EAEA,oBACEf,OAAA;IAAAmB,QAAA,eACEnB,OAAA;MACEoB,KAAK,EACHf,OAAO,KAAKM,UAAU,GAClB;QACEU,MAAM,EAAE,eAAe;QACvBC,eAAe,EAAEnB,QAAQ;QACzBoB,MAAM,EAAE;MACV,CAAC,GACD;QACED,eAAe,EAAEnB,QAAQ;QACzBoB,MAAM,EAAE;MACV;MAEN;;MAEA;MACA;MACA;MAAA;MACAC,OAAO,EAAEA,CAAA,KAAMpB,WAAW,CAACF,UAAU,CAACuB,EAAE,EAAEtB,QAAQ,EAAEE,OAAO;IAAE;MAAAqB,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACtD;EAAC;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACP,CAAC;AAEV,CAAC;AAACvB,EAAA,CA1DIL,SAA6B;AAAA6B,EAAA,GAA7B7B,SAA6B;AA4DnC,eAAeA,SAAS;AAAC,IAAA6B,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}