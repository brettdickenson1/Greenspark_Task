"use strict";
globalThis["webpackHotUpdateredux_ts"]("stories-Button-stories",{

/***/ "./src/stories/Button.stories.tsx":
/*!****************************************!*\
  !*** ./src/stories/Button.stories.tsx ***!
  \****************************************/
/***/ ((module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   Blue: () => (/* binding */ Blue),
/* harmony export */   Creme: () => (/* binding */ Creme),
/* harmony export */   Green: () => (/* binding */ Green),
/* harmony export */   GroupedBtns: () => (/* binding */ GroupedBtns),
/* harmony export */   __namedExportsOrder: () => (/* binding */ __namedExportsOrder),
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony import */ var _components_UI_WidgetBtn_WidgetBtn__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../components/UI/WidgetBtn/WidgetBtn */ "./src/components/UI/WidgetBtn/WidgetBtn.tsx");
/* harmony import */ var react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! react/jsx-dev-runtime */ "./node_modules/react/jsx-dev-runtime.js");
/* provided dependency */ var __react_refresh_utils__ = __webpack_require__(/*! ./node_modules/@pmmmwh/react-refresh-webpack-plugin/lib/runtime/RefreshUtils.js */ "./node_modules/@pmmmwh/react-refresh-webpack-plugin/lib/runtime/RefreshUtils.js");
/* provided dependency */ var __react_refresh_error_overlay__ = __webpack_require__(/*! ./node_modules/@pmmmwh/react-refresh-webpack-plugin/overlay/index.js */ "./node_modules/@pmmmwh/react-refresh-webpack-plugin/overlay/index.js");
__webpack_require__.$Refresh$.runtime = __webpack_require__(/*! ./node_modules/react-refresh/runtime.js */ "./node_modules/react-refresh/runtime.js");

var _jsxFileName = "/Users/brettdickenson1/Desktop/WORK/TypeScript/greenspark-tech-task/src/stories/Button.stories.tsx",
  _Blue$parameters,
  _Blue$parameters2,
  _Blue$parameters2$doc,
  _Green$parameters,
  _Green$parameters2,
  _Green$parameters2$do,
  _Creme$parameters,
  _Creme$parameters2,
  _Creme$parameters2$do,
  _GroupedBtns$paramete,
  _GroupedBtns$paramete2,
  _GroupedBtns$paramete3;


const meta = {
  component: _components_UI_WidgetBtn_WidgetBtn__WEBPACK_IMPORTED_MODULE_0__["default"],
  title: "Colored Btns"
};
/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (meta);
//ðŸ‘‡ Throws a type error it the args don't match the component props
const Blue = {
  args: {
    boxColor: "#2E3A8C",
    colorID: 1
  }
};
const Green = {
  args: {
    boxColor: "#3B755F",
    colorID: 2
  }
};
const Creme = {
  args: {
    boxColor: "#F2EBDB",
    colorID: 3
  }
};
const GroupedBtns = {
  render: args => /*#__PURE__*/(0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_1__.jsxDEV)("div", {
    children: /*#__PURE__*/(0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_1__.jsxDEV)(_components_UI_WidgetBtn_WidgetBtn__WEBPACK_IMPORTED_MODULE_0__["default"], {
      boxColor: "#2E3A8C",
      colorID: 1
    }, void 0, false, {
      fileName: _jsxFileName,
      lineNumber: 31,
      columnNumber: 7
    }, undefined)
  }, void 0, false, {
    fileName: _jsxFileName,
    lineNumber: 30,
    columnNumber: 19
  }, undefined)
};
Blue.parameters = {
  ...Blue.parameters,
  docs: {
    ...((_Blue$parameters = Blue.parameters) === null || _Blue$parameters === void 0 ? void 0 : _Blue$parameters.docs),
    source: {
      originalSource: "{\n  args: {\n    boxColor: \"#2E3A8C\",\n    colorID: 1\n  }\n}",
      ...((_Blue$parameters2 = Blue.parameters) === null || _Blue$parameters2 === void 0 ? void 0 : (_Blue$parameters2$doc = _Blue$parameters2.docs) === null || _Blue$parameters2$doc === void 0 ? void 0 : _Blue$parameters2$doc.source)
    }
  }
};
Green.parameters = {
  ...Green.parameters,
  docs: {
    ...((_Green$parameters = Green.parameters) === null || _Green$parameters === void 0 ? void 0 : _Green$parameters.docs),
    source: {
      originalSource: "{\n  args: {\n    boxColor: \"#3B755F\",\n    colorID: 2\n  }\n}",
      ...((_Green$parameters2 = Green.parameters) === null || _Green$parameters2 === void 0 ? void 0 : (_Green$parameters2$do = _Green$parameters2.docs) === null || _Green$parameters2$do === void 0 ? void 0 : _Green$parameters2$do.source)
    }
  }
};
Creme.parameters = {
  ...Creme.parameters,
  docs: {
    ...((_Creme$parameters = Creme.parameters) === null || _Creme$parameters === void 0 ? void 0 : _Creme$parameters.docs),
    source: {
      originalSource: "{\n  args: {\n    boxColor: \"#F2EBDB\",\n    colorID: 3\n  }\n}",
      ...((_Creme$parameters2 = Creme.parameters) === null || _Creme$parameters2 === void 0 ? void 0 : (_Creme$parameters2$do = _Creme$parameters2.docs) === null || _Creme$parameters2$do === void 0 ? void 0 : _Creme$parameters2$do.source)
    }
  }
};
GroupedBtns.parameters = {
  ...GroupedBtns.parameters,
  docs: {
    ...((_GroupedBtns$paramete = GroupedBtns.parameters) === null || _GroupedBtns$paramete === void 0 ? void 0 : _GroupedBtns$paramete.docs),
    source: {
      originalSource: "{\n  render: args => <div>\n      <WidgetBtn boxColor=\"#2E3A8C\" colorID={1} />\n    </div>\n}",
      ...((_GroupedBtns$paramete2 = GroupedBtns.parameters) === null || _GroupedBtns$paramete2 === void 0 ? void 0 : (_GroupedBtns$paramete3 = _GroupedBtns$paramete2.docs) === null || _GroupedBtns$paramete3 === void 0 ? void 0 : _GroupedBtns$paramete3.source)
    }
  }
};
const __namedExportsOrder = ["Blue", "Green", "Creme", "GroupedBtns"];

const $ReactRefreshModuleId$ = __webpack_require__.$Refresh$.moduleId;
const $ReactRefreshCurrentExports$ = __react_refresh_utils__.getModuleExports(
	$ReactRefreshModuleId$
);

function $ReactRefreshModuleRuntime$(exports) {
	if (true) {
		let errorOverlay;
		if (typeof __react_refresh_error_overlay__ !== 'undefined') {
			errorOverlay = __react_refresh_error_overlay__;
		}
		let testMode;
		if (typeof __react_refresh_test__ !== 'undefined') {
			testMode = __react_refresh_test__;
		}
		return __react_refresh_utils__.executeRuntime(
			exports,
			$ReactRefreshModuleId$,
			module.hot,
			errorOverlay,
			testMode
		);
	}
}

if (typeof Promise !== 'undefined' && $ReactRefreshCurrentExports$ instanceof Promise) {
	$ReactRefreshCurrentExports$.then($ReactRefreshModuleRuntime$);
} else {
	$ReactRefreshModuleRuntime$($ReactRefreshCurrentExports$);
}

/***/ })

});