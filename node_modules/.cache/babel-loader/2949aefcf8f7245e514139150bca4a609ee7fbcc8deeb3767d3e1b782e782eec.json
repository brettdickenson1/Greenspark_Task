{"ast":null,"code":"// import { WidgetSlice } from \"./features/widgetSlice\";\n// import { configureStore } from \"@reduxjs/toolkit\";\n// import { TypedUseSelectorHook, useDispatch, useSelector } from \"react-redux\";\n\n// export const store = configureStore({\n//   reducer: {\n//     widgetData: WidgetSlice.reducer,\n//   },\n// });\n\n// export type RootState = ReturnType<typeof store.getState>;\n// export const useAppDispatch: () => typeof store.dispatch = useDispatch;\n// export const useAppSelector: TypedUseSelectorHook<RootState> = useSelector;\n\nimport { combineReducers, configureStore } from \"@reduxjs/toolkit\";\n// Create the root reducer independently to obtain the RootState type\nconst rootReducer = combineReducers({\n  widgetData: WidgetSlice.reducer\n});\nexport function setupStore(preloadedState) {\n  return configureStore({\n    reducer: rootReducer,\n    preloadedState\n  });\n}","map":{"version":3,"names":["combineReducers","configureStore","rootReducer","widgetData","WidgetSlice","reducer","setupStore","preloadedState"],"sources":["/Users/brettdickenson1/Desktop/WORK/TypeScript/greenspark-tech-task/src/store/store.ts"],"sourcesContent":["// import { WidgetSlice } from \"./features/widgetSlice\";\n// import { configureStore } from \"@reduxjs/toolkit\";\n// import { TypedUseSelectorHook, useDispatch, useSelector } from \"react-redux\";\n\n// export const store = configureStore({\n//   reducer: {\n//     widgetData: WidgetSlice.reducer,\n//   },\n// });\n\n// export type RootState = ReturnType<typeof store.getState>;\n// export const useAppDispatch: () => typeof store.dispatch = useDispatch;\n// export const useAppSelector: TypedUseSelectorHook<RootState> = useSelector;\n\nimport {\n  combineReducers,\n  configureStore,\n  PreloadedState,\n} from \"@reduxjs/toolkit\";\nimport widgetReducer from \"../store/features/widgetSlice\";\n// Create the root reducer independently to obtain the RootState type\nconst rootReducer = combineReducers({\n  widgetData: WidgetSlice.reducer,\n});\nexport function setupStore(preloadedState?: PreloadedState<RootState>) {\n  return configureStore({\n    reducer: rootReducer,\n    preloadedState,\n  });\n}\nexport type RootState = ReturnType<typeof rootReducer>;\nexport type AppStore = ReturnType<typeof setupStore>;\nexport type AppDispatch = AppStore[\"dispatch\"];\n"],"mappings":"AAAA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA,SACEA,eAAe,EACfC,cAAc,QAET,kBAAkB;AAEzB;AACA,MAAMC,WAAW,GAAGF,eAAe,CAAC;EAClCG,UAAU,EAAEC,WAAW,CAACC;AAC1B,CAAC,CAAC;AACF,OAAO,SAASC,UAAUA,CAACC,cAA0C,EAAE;EACrE,OAAON,cAAc,CAAC;IACpBI,OAAO,EAAEH,WAAW;IACpBK;EACF,CAAC,CAAC;AACJ"},"metadata":{},"sourceType":"module","externalDependencies":[]}