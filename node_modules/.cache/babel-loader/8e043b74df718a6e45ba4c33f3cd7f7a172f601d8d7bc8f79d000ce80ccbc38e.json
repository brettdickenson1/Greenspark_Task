{"ast":null,"code":"import { createSlice } from \"@reduxjs/toolkit\";\n// export interface CounterState {\n//   value: number;\n// }\n\n// // Define the initial state using that type\n// const initialState: CounterState = {\n//   value: 0,\n// };\n\n// interface PersonState {\n//   value: 0;\n// //   persons: Person[];\n// }\nconst initialState = {\n  value: 0,\n  selectedColor: \"green\"\n};\n\n// const initialState: PersonState = {\n//   persons: [],\n// };\n\n// export const fetchPerson = createAsyncThunk(\n//   \"person/fetch\",\n//   async (thunkAPI) => {\n//     const response = await fetch(\n//       \"https://api.mocki.io/v2/016d11e8/product-widgets\",\n//       {\n//         method: \"GET\",\n//       }\n//     );\n//     const data = response.json();\n//     console.log(response, \"RESPONSE HERE YOOO\");\n//     return data;\n//   }\n// );\n\nexport const PersonSlice = createSlice({\n  name: \"person\",\n  initialState,\n  reducers: {\n    // addPerson: (state, action) => {\n    //   state.persons = action.payload;\n    // },\n    // incrementByAmount: (state, action: PayloadAction<number>) => {\n    //   state.value += action.payload\n    // }\n    addPerson: (state, action) => {\n      state.value += action.payload;\n    }\n  },\n  extraReducers: builder => {\n    // builder.addCase(fetchPerson.fulfilled, (state, action) => {\n    //   state.persons = action.payload;\n    // });\n    // builder.addCase(savePerson.fulfilled, (state, action) => {\n    //   state.persons.push(action.payload);\n    // });\n  }\n});\nexport default PersonSlice.reducer;\nexport const {\n  addPerson\n} = PersonSlice.actions;","map":{"version":3,"names":["createSlice","initialState","value","selectedColor","PersonSlice","name","reducers","addPerson","state","action","payload","extraReducers","builder","reducer","actions"],"sources":["/Users/brettdickenson1/Desktop/WORK/TypeScript/redux-ts/src/store/features/personSlice.ts"],"sourcesContent":["import { createAsyncThunk, createSlice, PayloadAction } from \"@reduxjs/toolkit\";\n\nexport interface Person {\n  value: number;\n  //   id: number;\n  //   action: string;\n  //   active: boolean;\n  //   amount: number;\n  //   linked: boolean;\n  selectedColor: string;\n  //   type: string;\n}\n\n// export interface CounterState {\n//   value: number;\n// }\n\n// // Define the initial state using that type\n// const initialState: CounterState = {\n//   value: 0,\n// };\n\n// interface PersonState {\n//   value: 0;\n// //   persons: Person[];\n// }\n\nconst initialState: Person = {\n  value: 0,\n  selectedColor: \"green\",\n};\n\n// const initialState: PersonState = {\n//   persons: [],\n// };\n\n// export const fetchPerson = createAsyncThunk(\n//   \"person/fetch\",\n//   async (thunkAPI) => {\n//     const response = await fetch(\n//       \"https://api.mocki.io/v2/016d11e8/product-widgets\",\n//       {\n//         method: \"GET\",\n//       }\n//     );\n//     const data = response.json();\n//     console.log(response, \"RESPONSE HERE YOOO\");\n//     return data;\n//   }\n// );\n\nexport const PersonSlice = createSlice({\n  name: \"person\",\n  initialState,\n  reducers: {\n    // addPerson: (state, action) => {\n    //   state.persons = action.payload;\n    // },\n    // incrementByAmount: (state, action: PayloadAction<number>) => {\n    //   state.value += action.payload\n    // }\n    addPerson: (\n      state,\n      action: PayloadAction<{ value: number; selectedColor: string }>\n    ) => {\n      state.value += action.payload;\n    },\n  },\n  extraReducers: (builder) => {\n    // builder.addCase(fetchPerson.fulfilled, (state, action) => {\n    //   state.persons = action.payload;\n    // });\n    // builder.addCase(savePerson.fulfilled, (state, action) => {\n    //   state.persons.push(action.payload);\n    // });\n  },\n});\n\nexport default PersonSlice.reducer;\nexport const { addPerson } = PersonSlice.actions;\n"],"mappings":"AAAA,SAA2BA,WAAW,QAAuB,kBAAkB;AAa/E;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AAEA,MAAMC,YAAoB,GAAG;EAC3BC,KAAK,EAAE,CAAC;EACRC,aAAa,EAAE;AACjB,CAAC;;AAED;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,OAAO,MAAMC,WAAW,GAAGJ,WAAW,CAAC;EACrCK,IAAI,EAAE,QAAQ;EACdJ,YAAY;EACZK,QAAQ,EAAE;IACR;IACA;IACA;IACA;IACA;IACA;IACAC,SAAS,EAAEA,CACTC,KAAK,EACLC,MAA+D,KAC5D;MACHD,KAAK,CAACN,KAAK,IAAIO,MAAM,CAACC,OAAO;IAC/B;EACF,CAAC;EACDC,aAAa,EAAGC,OAAO,IAAK;IAC1B;IACA;IACA;IACA;IACA;IACA;EAAA;AAEJ,CAAC,CAAC;AAEF,eAAeR,WAAW,CAACS,OAAO;AAClC,OAAO,MAAM;EAAEN;AAAU,CAAC,GAAGH,WAAW,CAACU,OAAO"},"metadata":{},"sourceType":"module","externalDependencies":[]}