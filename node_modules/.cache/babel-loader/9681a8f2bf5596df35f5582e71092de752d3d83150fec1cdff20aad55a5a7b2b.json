{"ast":null,"code":"import { createAsyncThunk, createSlice } from \"@reduxjs/toolkit\";\nimport axios from \"axios\";\nconst initialState = {\n  widgetData: []\n};\n\n// export const fetchWidgetData = createAsyncThunk(\n//   \"widgetData/fetch\",\n//   async () => {\n//     const response = await fetch(\n//       \"https://api.mocki.io/v2/016d11e8/product-widgets\",\n//       {\n//         method: \"GET\",\n//       }\n//     )\n//     const data = response.json();\n//     return data;\n//   }\n// );\n\n// export const fetchWidgetData = createAsyncThunk(\n//   \"widgetData/fetch\",\n//   async () => {\n//     try {\n//       const url = base_url;\n//       const response = await axios.get(url);\n//       return doTransformHere(response.data);\n//     } catch (err) {\n//       console.log(err);\n//       return [];\n//     }\n//   }\n// );\n\nexport const fetchWidgetData = createAsyncThunk(\"widgetData/fetch\", async () => {\n  try {\n    const url = \"https://api.mocki.io/v2/016d11e8/product-widgets\";\n    const response = await axios.get(url);\n    console.log(response.data, \"!\");\n    const data = response.data;\n    const result = data.map(res => res.selectedColor === \"green\");\n    console.log(result);\n    return response.data;\n  } catch (err) {\n    console.log(err);\n    return [];\n  }\n});\n\n// export const fetchWidgetData = createAsyncThunk: Promise<WidgetData[]> {\n//   // try {\n//   const url = \"https://api.mocki.io/v2/016d11e8/product-widgets\";\n//   const response = await axios.get(url);\n\n//   return response.data;\n//   // } catch (err) {\n//   //   console.log(err);\n//   //   return [];\n//   // }\n// }\n\n// axios.get(baseURL).then((response) => {\n//   setPost(response.data);\n// });\n\n// export const updateWidgetData = createAsyncThunk(\n//   \"widgetData/fetch\",\n//   async () => {\n\n//     // const response = await fetch(\n//     //   \"https://api.mocki.io/v2/016d11e8/product-widgets\",\n//     //   {\n//     //     method: \"GET\",\n//     //   }\n//     // );\n//     // const data = response.json();\n//     // return data;\n//   }\n// );\n\nexport const WidgetSlice = createSlice({\n  name: \"widget\",\n  initialState,\n  reducers: {\n    updateWidget: (state, action) => {\n      const index = action.payload.id;\n      return {\n        ...state,\n        widgetData: state.widgetData.map((content, i) => index === content.id ? {\n          ...content,\n          selectedColor: action.payload.selectedColor\n        } : content)\n      };\n    },\n    activateLinked: (state, action) => {\n      return {\n        ...state,\n        widgetData: state.widgetData.map((content, i) => action.payload.id === content.id ? {\n          ...content,\n          linked: !content.linked\n        } : action.payload.id !== content.id ? {\n          ...content,\n          linked: false\n        } : content)\n      };\n    },\n    activateBadge: (state, action) => {\n      return {\n        ...state,\n        widgetData: state.widgetData.map((content, i) => action.payload.id === content.id ? {\n          ...content,\n          active: !content.active\n        } : action.payload.id !== content.id ? {\n          ...content,\n          active: false\n        } : content)\n      };\n    },\n    updateColorOnMount: (state, action) => {\n      const index = action.payload.id;\n      return {\n        ...state,\n        widgetData: state.widgetData.map((content, i) => index === content.id ? {\n          ...content,\n          selectedColor: action.payload.selectedColor\n        } : content)\n      };\n      // return {\n      //   ...state,\n      // widgetData: state.widgetData.map((content) =>\n      //   content.selectedColor === \"green\"\n      //     ? { ...content, selectedColor: \"#2E3A8C\" }\n      //     : content.selectedColor === \"black\"\n      //     ? {\n      //         ...content,\n      //         selectedColor: \"orange\",\n      //       }\n      //     : content.selectedColor === \"blue\"\n      //     ? {\n      //         ...content,\n      //         selectedColor: \"pink\",\n      //       }\n      //     : content\n      // ),\n      // };\n    }\n  },\n\n  extraReducers: builder => {\n    builder.addCase(fetchWidgetData.fulfilled, (state, action) => {\n      state.widgetData = action.payload;\n    });\n    // builder.addCase(fetchWidgetData.rejected, (state, action) => {\n    //   if (action.payload) {\n    //     state.error = action.payload.errorMessage\n    //   } else {\n    //     state.error = action.error.message\n    //   }\n  }\n});\n\nexport default WidgetSlice.reducer;\nexport const {\n  updateWidget,\n  activateBadge,\n  activateLinked,\n  updateColorOnMount\n} = WidgetSlice.actions;","map":{"version":3,"names":["createAsyncThunk","createSlice","axios","initialState","widgetData","fetchWidgetData","url","response","get","console","log","data","result","map","res","selectedColor","err","WidgetSlice","name","reducers","updateWidget","state","action","index","payload","id","content","i","activateLinked","linked","activateBadge","active","updateColorOnMount","extraReducers","builder","addCase","fulfilled","reducer","actions"],"sources":["/Users/brettdickenson1/Desktop/WORK/TypeScript/greenspark-tech-task/src/store/features/widgetSlice.ts"],"sourcesContent":["import { createAsyncThunk, createSlice, PayloadAction } from \"@reduxjs/toolkit\";\nimport { WidgetData, WidgetState } from \"../../types/globalTypes\";\nimport axios from \"axios\";\n\nconst initialState: WidgetState = {\n  widgetData: [],\n};\n\n// export const fetchWidgetData = createAsyncThunk(\n//   \"widgetData/fetch\",\n//   async () => {\n//     const response = await fetch(\n//       \"https://api.mocki.io/v2/016d11e8/product-widgets\",\n//       {\n//         method: \"GET\",\n//       }\n//     )\n//     const data = response.json();\n//     return data;\n//   }\n// );\n\n// export const fetchWidgetData = createAsyncThunk(\n//   \"widgetData/fetch\",\n//   async () => {\n//     try {\n//       const url = base_url;\n//       const response = await axios.get(url);\n//       return doTransformHere(response.data);\n//     } catch (err) {\n//       console.log(err);\n//       return [];\n//     }\n//   }\n// );\n\nexport const fetchWidgetData = createAsyncThunk(\n  \"widgetData/fetch\",\n  async () => {\n    try {\n      const url = \"https://api.mocki.io/v2/016d11e8/product-widgets\";\n      const response = await axios.get(url);\n      console.log(response.data, \"!\");\n      const data = response.data;\n      const result = data.map((res: any) => res.selectedColor === \"green\");\n      console.log(result);\n      return response.data;\n    } catch (err) {\n      console.log(err);\n      return [];\n    }\n  }\n);\n\n// export const fetchWidgetData = createAsyncThunk: Promise<WidgetData[]> {\n//   // try {\n//   const url = \"https://api.mocki.io/v2/016d11e8/product-widgets\";\n//   const response = await axios.get(url);\n\n//   return response.data;\n//   // } catch (err) {\n//   //   console.log(err);\n//   //   return [];\n//   // }\n// }\n\n// axios.get(baseURL).then((response) => {\n//   setPost(response.data);\n// });\n\n// export const updateWidgetData = createAsyncThunk(\n//   \"widgetData/fetch\",\n//   async () => {\n\n//     // const response = await fetch(\n//     //   \"https://api.mocki.io/v2/016d11e8/product-widgets\",\n//     //   {\n//     //     method: \"GET\",\n//     //   }\n//     // );\n//     // const data = response.json();\n//     // return data;\n//   }\n// );\n\nexport const WidgetSlice = createSlice({\n  name: \"widget\",\n  initialState,\n  reducers: {\n    updateWidget: (\n      state,\n      action: PayloadAction<{ id: number; selectedColor: string }>\n    ) => {\n      const index = action.payload.id;\n      return {\n        ...state,\n        widgetData: state.widgetData.map((content, i) =>\n          index === content.id\n            ? { ...content, selectedColor: action.payload.selectedColor }\n            : content\n        ),\n      };\n    },\n    activateLinked: (state, action: PayloadAction<{ id: number }>) => {\n      return {\n        ...state,\n        widgetData: state.widgetData.map((content, i) =>\n          action.payload.id === content.id\n            ? { ...content, linked: !content.linked }\n            : action.payload.id !== content.id\n            ? { ...content, linked: false }\n            : content\n        ),\n      };\n    },\n    activateBadge: (state, action: PayloadAction<{ id: number }>) => {\n      return {\n        ...state,\n        widgetData: state.widgetData.map((content, i) =>\n          action.payload.id === content.id\n            ? { ...content, active: !content.active }\n            : action.payload.id !== content.id\n            ? { ...content, active: false }\n            : content\n        ),\n      };\n    },\n    updateColorOnMount: (\n      state,\n      action: PayloadAction<{ id: number; selectedColor: string }>\n    ) => {\n      const index = action.payload.id;\n      return {\n        ...state,\n        widgetData: state.widgetData.map((content, i) =>\n          index === content.id\n            ? { ...content, selectedColor: action.payload.selectedColor }\n            : content\n        ),\n      };\n      // return {\n      //   ...state,\n      // widgetData: state.widgetData.map((content) =>\n      //   content.selectedColor === \"green\"\n      //     ? { ...content, selectedColor: \"#2E3A8C\" }\n      //     : content.selectedColor === \"black\"\n      //     ? {\n      //         ...content,\n      //         selectedColor: \"orange\",\n      //       }\n      //     : content.selectedColor === \"blue\"\n      //     ? {\n      //         ...content,\n      //         selectedColor: \"pink\",\n      //       }\n      //     : content\n      // ),\n      // };\n    },\n  },\n  extraReducers: (builder) => {\n    builder.addCase(\n      fetchWidgetData.fulfilled,\n      (state, action: PayloadAction<WidgetData[]>) => {\n        state.widgetData = action.payload;\n      }\n    );\n    // builder.addCase(fetchWidgetData.rejected, (state, action) => {\n    //   if (action.payload) {\n    //     state.error = action.payload.errorMessage\n    //   } else {\n    //     state.error = action.error.message\n    //   }\n  },\n});\n\nexport default WidgetSlice.reducer;\nexport const {\n  updateWidget,\n  activateBadge,\n  activateLinked,\n  updateColorOnMount,\n} = WidgetSlice.actions;\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}